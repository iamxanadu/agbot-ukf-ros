//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: AgBot_simulinkfunction.cpp
//
// MATLAB Coder version            : 4.1
// C/C++ source code generated on  : 30-Nov-2019 15:37:58
//

// Include Files
#include <cmath>
#include <math.h>
#include "rt_nonfinite.h"
#include "AgBot_simulinkfunction.h"
#include "sqrt.h"

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions

//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  double d0;
  double d1;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = rtNaN;
  } else {
    d0 = std::abs(u0);
    d1 = std::abs(u1);
    if (rtIsInf(u1)) {
      if (d0 == 1.0) {
        y = 1.0;
      } else if (d0 > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

//
// Arguments    : double q_lmDt // rad/s
//                double q_rmDt // rad/s
//                const double VAR[14]
//                double VARp[14]
//                double *vrel1_Nx // take it out -->
//                double *vrel4_Nx
//                double *vrel5_Nx
//                double *vrel8_Nx
// Return Type  : void
//
void AgBot_simulinkfunction(double q_lmDt, double q_rmDt, const double VAR[14],
  double VARp[14], double *vrel1_Nx, double *vrel4_Nx, double *vrel5_Nx, double *
  vrel8_Nx)
{
  double Z[500];
  double vrel1_Tx;
  double vrel2_Tx;
  double vrel3_Tx;
  double vrel2_Ny;
  double Ft8;
  double vrel4_Tx;
  double Ft1;
  double Fn1;
  double vrel2_Nx;
  double vrel3_Nx;
  double Ft4;
  double Fn4;
  double vrel8_Tx;
  double Fn5;
  double vrel6_Nx;
  double vrel7_Nx;
  double Fn8;
  double Z_tmp;

  // -------------------------------+--------------------------+-------------------+----------------- 
  //  Quantity                      | Value                    | Units             | Description 
  // -------------------------------|--------------------------|-------------------|----------------- 
  //  m                   Constant
  //  N*s/m               Constant
  //  noUnits             Constant
  //  1/m                 Constant
  //  m/s                 Constant
  //  m/s^2               Constant
  //  m                   Constant
  //  kg*m^2              Constant
  //  kg*m^2              Constant
  //  kg*m^2              Constant
  //  s/m                 Constant
  //  N                   Constant
  //  m                   Constant
  //  m                   Constant
  //  m                   Constant
  //  kg                  Constant
  //  noUnits             Constant
  //  noUnits             Constant
  //  noUnits             Constant
  //  m                   Constant
  //  deg                 Constant
  //  deg                 Constant
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  m                   Initial Value
  //  m                   Initial Value
  //  m                   Initial Value
  //  rad/sec             Initial Value
  //  rad/sec             Initial Value
  //  rad/sec             Initial Value
  //  m/s                 Initial Value
  //  m/s                 Initial Value
  //  m/s                 Initial Value
  // -------------------------------+--------------------------+-------------------+----------------- 
  //  Unit conversions
  //  Evaluate constants
  Z[40] = 0.090666666666666673;
  Z[98] = 0.05760333333333334;
  Z[105] = -0.033063333333333333;
  Z[112] = -0.12373;
  Z[153] = 0.037765;
  Z[240] = 137.29309999999998;

  // =========================================================================== 
  // =========================================================================== 
  // =========================================================================== 
  // =========================================================================== 
  Z[0] = std::cos(VAR[0]);
  Z[7] = std::cos(VAR[1]);
  Z[13] = Z[0] * Z[7];
  Z[5] = std::sin(VAR[0]);
  Z[6] = std::sin(VAR[1]);
  Z[10] = Z[0] * Z[6];
  Z[88] = (((0.035 + 0.0945 * Z[13]) + 0.14827 * Z[5]) - VAR[7]) - 0.1871 * Z[10];
  Z[241] = std::tanh(11613.5814 * (0.0446 + Z[88]));
  Z[242] = std::abs(0.0446 + Z[88]);
  Z[243] = 80.046 * (1.0 + Z[241]) * rt_powd_snf(Z[242], 0.4688);
  Z[3] = std::sin(VAR[2]);
  Z[4] = Z[0] * Z[3];
  Z[1] = std::cos(VAR[2]);
  Z[2] = Z[0] * Z[1];
  Z[8] = Z[1] * Z[5] * Z[6] - Z[3] * Z[7];
  Z[9] = Z[1] * Z[7] + Z[3] * Z[5] * Z[6];
  Z[11] = Z[3] * Z[6] + Z[1] * Z[5] * Z[7];
  Z[12] = Z[3] * Z[5] * Z[7] - Z[1] * Z[6];
  Z[137] = (Z[2] * Z[4] + Z[8] * Z[9]) + Z[11] * Z[12];
  Z[142] = (Z[4] * Z[4] + Z[9] * Z[9]) + Z[12] * Z[12];
  Z[143] = (Z[9] * Z[10] + Z[12] * Z[13]) - Z[4] * Z[5];
  Z[154] = 0.037765 * Z[8];
  Z[141] = 0.0945 * Z[9] + 0.1871 * Z[12];
  Z[152] = 0.035 * Z[2];
  Z[162] = Z[141] + Z[152];
  Z[33] = -0.0945 * Z[10] - 0.1871 * Z[13];
  Z[30] = 0.14827 * Z[13] - 0.0945 * Z[5];
  Z[28] = -0.14827 * Z[10] - 0.1871 * Z[5];
  Z[144] = (Z[4] * Z[33] + Z[9] * Z[30]) + Z[12] * Z[28];
  Z[151] = 0.035 * ((Z[2] * Z[5] - Z[8] * Z[10]) - Z[11] * Z[13]);
  Z[163] = Z[144] - Z[151];
  Z[32] = 0.1871 * Z[6] - 0.0945 * Z[7];
  Z[31] = 0.14827 * Z[6];
  Z[29] = 0.14827 * Z[7];
  Z[145] = (Z[4] * Z[32] - Z[9] * Z[31]) - Z[12] * Z[29];
  Z[150] = 0.035 * (Z[6] * Z[11] - Z[7] * Z[8]);
  Z[164] = Z[145] - Z[150];
  Z[158] = 0.037765 * Z[9];
  Z[136] = (Z[2] * Z[2] + Z[8] * Z[8]) + Z[11] * Z[11];
  Z[138] = (Z[8] * Z[10] + Z[11] * Z[13]) - Z[2] * Z[5];
  Z[135] = 0.0945 * Z[8] + 0.1871 * Z[11];
  Z[157] = 0.035 * Z[4];
  Z[159] = Z[135] - Z[157];
  Z[139] = (Z[2] * Z[33] + Z[8] * Z[30]) + Z[11] * Z[28];
  Z[156] = 0.035 * ((Z[4] * Z[5] - Z[9] * Z[10]) - Z[12] * Z[13]);
  Z[160] = Z[139] + Z[156];
  Z[140] = (Z[2] * Z[32] - Z[8] * Z[31]) - Z[11] * Z[29];
  Z[155] = 0.035 * (Z[6] * Z[12] - Z[7] * Z[9]);
  Z[161] = Z[140] + Z[155];
  Z[313] = Z[2] * Z[2] + Z[4] * Z[4];
  Z[314] = Z[313];
  b_sqrt(&Z[314]);
  Z[315] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[159]
              * VAR[9]) + Z[160] * VAR[10]) + Z[161] * VAR[8]) - Z[158] * q_lmDt;
  Z[316] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_lmDt) + Z[162] * VAR[9]) + Z[163] * VAR[10]) + Z[164] * VAR[8];
  Z[89] = 0.14827 * Z[0];
  Z[146] = ((Z[89] - Z[5] * Z[32]) - Z[10] * Z[31]) - Z[13] * Z[29];
  Z[147] = 0.0945 * Z[10] + 0.1871 * Z[13];
  Z[148] = ((-1.0 + Z[5] * Z[5]) + Z[10] * Z[10]) + Z[13] * Z[13];
  Z[149] = (Z[10] * Z[30] + Z[13] * Z[28]) - Z[5] * Z[33];
  Z[20] = -Z[0] * Z[6] * VAR[9] - Z[5] * Z[7] * VAR[8];
  Z[18] = Z[0] * Z[7] * VAR[9] - Z[5] * Z[6] * VAR[8];
  Z[317] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[146] * VAR[8]) + Z[147]
               * VAR[9]) + Z[148] * VAR[13]) + Z[149] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[318] = (Z[315] * Z[315] + Z[316] * Z[316]) + Z[317] * Z[317];
  Z[319] = Z[318];
  b_sqrt(&Z[319]);
  vrel1_Tx = (Z[4] * ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR
    [13]) + Z[154] * q_lmDt) + Z[162] * VAR[9]) + Z[163] * VAR[10]) + Z[164] *
                      VAR[8]) - Z[2] * ((((((Z[158] * q_lmDt - Z[136] * VAR[11])
    - Z[137] * VAR[12]) - Z[138] * VAR[13]) - Z[159] * VAR[9]) - Z[160] * VAR[10])
    - Z[161] * VAR[8])) / (Z[314] * (0.01 + Z[319]));
  Z[99] = (((0.035 + 0.0945 * Z[13]) + Z[98] * Z[5]) - VAR[7]) - 0.1871 * Z[10];
  Z[244] = std::tanh(11613.5814 * (0.0446 + Z[99]));
  Z[245] = std::abs(0.0446 + Z[99]);
  Z[246] = 80.046 * (1.0 + Z[244]) * rt_powd_snf(Z[245], 0.4688);
  Z[44] = Z[40] * Z[13];
  Z[45] = Z[30] - Z[44];
  Z[42] = Z[40] * Z[10];
  Z[47] = Z[28] + Z[42];
  Z[167] = (Z[4] * Z[33] + Z[9] * Z[45]) + Z[12] * Z[47];
  Z[173] = Z[167] - Z[151];
  Z[43] = Z[40] * Z[6];
  Z[46] = Z[43] - Z[31];
  Z[41] = Z[40] * Z[7];
  Z[48] = Z[41] - Z[29];
  Z[168] = (Z[4] * Z[32] + Z[9] * Z[46]) + Z[12] * Z[48];
  Z[174] = Z[168] - Z[150];
  Z[166] = (Z[2] * Z[32] + Z[8] * Z[46]) + Z[11] * Z[48];
  Z[171] = Z[155] + Z[166];
  Z[165] = (Z[2] * Z[33] + Z[8] * Z[45]) + Z[11] * Z[47];
  Z[172] = Z[156] + Z[165];
  Z[320] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[159]
              * VAR[9]) + Z[171] * VAR[8]) + Z[172] * VAR[10]) - Z[158] * q_lmDt;
  Z[321] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_lmDt) + Z[162] * VAR[9]) + Z[173] * VAR[10]) + Z[174] * VAR[8];
  Z[100] = Z[98] * Z[0];
  Z[169] = ((Z[100] + Z[10] * Z[46]) + Z[13] * Z[48]) - Z[5] * Z[32];
  Z[170] = (Z[10] * Z[45] + Z[13] * Z[47]) - Z[5] * Z[33];
  Z[322] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[147] * VAR[9]) + Z[148]
               * VAR[13]) + Z[169] * VAR[8]) + Z[170] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[323] = (Z[320] * Z[320] + Z[321] * Z[321]) + Z[322] * Z[322];
  Z[324] = Z[323];
  b_sqrt(&Z[324]);
  vrel2_Tx = (Z[4] * ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR
    [13]) + Z[154] * q_lmDt) + Z[162] * VAR[9]) + Z[173] * VAR[10]) + Z[174] *
                      VAR[8]) - Z[2] * ((((((Z[158] * q_lmDt - Z[136] * VAR[11])
    - Z[137] * VAR[12]) - Z[138] * VAR[13]) - Z[159] * VAR[9]) - Z[171] * VAR[8])
    - Z[172] * VAR[10])) / (Z[314] * (0.01 + Z[324]));
  Z[106] = (((0.035 + 0.0945 * Z[13]) + Z[105] * Z[5]) - VAR[7]) - 0.1871 * Z[10];
  Z[247] = std::tanh(11613.5814 * (0.0446 + Z[106]));
  Z[248] = std::abs(0.0446 + Z[106]);
  Z[249] = 80.046 * (1.0 + Z[247]) * rt_powd_snf(Z[248], 0.4688);
  Z[54] = Z[43] + Z[46];
  Z[56] = Z[41] + Z[48];
  Z[177] = (Z[4] * Z[32] + Z[9] * Z[54]) + Z[12] * Z[56];
  Z[183] = Z[177] - Z[150];
  Z[55] = Z[45] - Z[44];
  Z[57] = Z[42] + Z[47];
  Z[178] = (Z[4] * Z[33] + Z[9] * Z[55]) + Z[12] * Z[57];
  Z[184] = Z[178] - Z[151];
  Z[175] = (Z[2] * Z[32] + Z[8] * Z[54]) + Z[11] * Z[56];
  Z[181] = Z[155] + Z[175];
  Z[176] = (Z[2] * Z[33] + Z[8] * Z[55]) + Z[11] * Z[57];
  Z[182] = Z[156] + Z[176];
  Z[325] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[159]
              * VAR[9]) + Z[181] * VAR[8]) + Z[182] * VAR[10]) - Z[158] * q_lmDt;
  Z[326] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_lmDt) + Z[162] * VAR[9]) + Z[183] * VAR[8]) + Z[184] * VAR[10];
  Z[107] = Z[105] * Z[0];
  Z[179] = ((Z[107] + Z[10] * Z[54]) + Z[13] * Z[56]) - Z[5] * Z[32];
  Z[180] = (Z[10] * Z[55] + Z[13] * Z[57]) - Z[5] * Z[33];
  Z[327] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[147] * VAR[9]) + Z[148]
               * VAR[13]) + Z[179] * VAR[8]) + Z[180] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[328] = (Z[325] * Z[325] + Z[326] * Z[326]) + Z[327] * Z[327];
  Z[329] = Z[328];
  b_sqrt(&Z[329]);
  vrel3_Tx = (Z[4] * ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR
    [13]) + Z[154] * q_lmDt) + Z[162] * VAR[9]) + Z[183] * VAR[8]) + Z[184] *
                      VAR[10]) - Z[2] * ((((((Z[158] * q_lmDt - Z[136] * VAR[11])
    - Z[137] * VAR[12]) - Z[138] * VAR[13]) - Z[159] * VAR[9]) - Z[181] * VAR[8])
    - Z[182] * VAR[10])) / (Z[314] * (0.01 + Z[329]));
  Z[113] = (((0.035 + 0.0945 * Z[13]) + Z[112] * Z[5]) - VAR[7]) - 0.1871 * Z[10];
  Z[250] = std::tanh(11613.5814 * (0.0446 + Z[113]));
  Z[251] = std::abs(0.0446 + Z[113]);
  Z[252] = 80.046 * (1.0 + Z[250]) * rt_powd_snf(Z[251], 0.4688);
  Z[61] = Z[43] + Z[54];
  Z[63] = Z[41] + Z[56];
  Z[187] = (Z[4] * Z[32] + Z[9] * Z[61]) + Z[12] * Z[63];
  Z[193] = Z[187] - Z[150];
  Z[62] = Z[55] - Z[44];
  Z[64] = Z[42] + Z[57];
  Z[188] = (Z[4] * Z[33] + Z[9] * Z[62]) + Z[12] * Z[64];
  Z[194] = Z[188] - Z[151];
  Z[185] = (Z[2] * Z[32] + Z[8] * Z[61]) + Z[11] * Z[63];
  Z[191] = Z[155] + Z[185];
  Z[186] = (Z[2] * Z[33] + Z[8] * Z[62]) + Z[11] * Z[64];
  Z[192] = Z[156] + Z[186];
  Z[330] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[159]
              * VAR[9]) + Z[191] * VAR[8]) + Z[192] * VAR[10]) - Z[158] * q_lmDt;
  Z[331] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_lmDt) + Z[162] * VAR[9]) + Z[193] * VAR[8]) + Z[194] * VAR[10];
  Z[114] = Z[112] * Z[0];
  Z[189] = ((Z[114] + Z[10] * Z[61]) + Z[13] * Z[63]) - Z[5] * Z[32];
  Z[190] = (Z[10] * Z[62] + Z[13] * Z[64]) - Z[5] * Z[33];
  Z[332] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[147] * VAR[9]) + Z[148]
               * VAR[13]) + Z[189] * VAR[8]) + Z[190] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[333] = (Z[330] * Z[330] + Z[331] * Z[331]) + Z[332] * Z[332];
  Z[334] = Z[333];
  b_sqrt(&Z[334]);
  vrel2_Ny = (((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_lmDt) + Z[162] * VAR[9];
  Ft8 = (((Z[158] * q_lmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z[138] *
         VAR[13]) - Z[159] * VAR[9];
  vrel4_Tx = (Z[4] * ((vrel2_Ny + Z[193] * VAR[8]) + Z[194] * VAR[10]) - Z[2] *
              ((Ft8 - Z[191] * VAR[8]) - Z[192] * VAR[10])) / (Z[314] * (0.01 +
    Z[334]));
  Ft8 = (Ft8 - Z[160] * VAR[10]) - Z[161] * VAR[8];
  Ft1 = -0.058778525229247328 * (0.5 + 0.5 * std::tanh(-3.0 + 30.0 * (Z[4] *
    ((vrel2_Ny + Z[163] * VAR[10]) + Z[164] * VAR[8]) - Z[2] * Ft8) / Z[314])) *
    (((Z[243] * vrel1_Tx + Z[246] * vrel2_Tx) + Z[249] * vrel3_Tx) + Z[252] *
     vrel4_Tx) / (1.0 - 0.058778525229247328 * vrel1_Tx);
  Fn1 = Z[243] - Ft1;
  *vrel1_Nx = -Ft8 / (0.01 + Z[319]);
  Z[359] = 0.1 * Fn1 * *vrel1_Nx;
  vrel2_Nx = -((((((Z[158] * q_lmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z
                  [138] * VAR[13]) - Z[159] * VAR[9]) - Z[171] * VAR[8]) - Z[172]
               * VAR[10]) / (0.01 + Z[324]);
  Z[361] = 0.1 * Z[246] * vrel2_Nx;
  Z[363] = -Z[359] - Z[361];
  vrel3_Nx = -((((((Z[158] * q_lmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z
                  [138] * VAR[13]) - Z[159] * VAR[9]) - Z[181] * VAR[8]) - Z[182]
               * VAR[10]) / (0.01 + Z[329]);
  Z[365] = 0.1 * Z[249] * vrel3_Nx;
  Z[367] = Z[363] - Z[365];
  Ft8 = (((((Z[158] * q_lmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z[138] *
           VAR[13]) - Z[159] * VAR[9]) - Z[191] * VAR[8]) - Z[192] * VAR[10];
  Ft4 = 0.0798635510047293 * (0.5 - 0.5 * std::tanh(3.0 + 30.0 * (Z[4] *
    ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154] *
        q_lmDt) + Z[162] * VAR[9]) + Z[193] * VAR[8]) + Z[194] * VAR[10]) - Z[2]
    * Ft8) / Z[314])) * (((Z[243] * vrel1_Tx + Z[246] * vrel2_Tx) + Z[249] *
    vrel3_Tx) + Z[252] * vrel4_Tx) / (1.0 + 0.0798635510047293 * vrel4_Tx);
  Fn4 = Z[252] - Ft4;
  *vrel4_Nx = -Ft8 / (0.01 + Z[334]);
  Z[369] = 0.1 * Fn4 * *vrel4_Nx;
  Z[371] = Z[367] - Z[369];
  Z[119] = (((0.035 + 0.0945 * Z[13]) + 0.14827 * Z[5]) + 0.1871 * Z[10]) - VAR
    [7];
  Z[253] = std::tanh(11613.5814 * (0.0446 + Z[119]));
  Z[254] = std::abs(0.0446 + Z[119]);
  Z[255] = 80.046 * (1.0 + Z[253]) * rt_powd_snf(Z[254], 0.4688);
  Z[198] = 0.0945 * Z[9] - 0.1871 * Z[12];
  Z[207] = Z[152] + Z[198];
  Z[70] = 0.1871 * Z[13] - 0.0945 * Z[10];
  Z[68] = 0.1871 * Z[5] - 0.14827 * Z[10];
  Z[199] = (Z[4] * Z[70] + Z[9] * Z[30]) + Z[12] * Z[68];
  Z[208] = Z[199] - Z[151];
  Z[69] = -0.0945 * Z[7] - 0.1871 * Z[6];
  Z[200] = (Z[4] * Z[69] - Z[9] * Z[31]) - Z[12] * Z[29];
  Z[209] = Z[200] - Z[150];
  Z[197] = (Z[2] * Z[69] - Z[8] * Z[31]) - Z[11] * Z[29];
  Z[204] = Z[155] + Z[197];
  Z[196] = (Z[2] * Z[70] + Z[8] * Z[30]) + Z[11] * Z[68];
  Z[205] = Z[156] + Z[196];
  Z[195] = 0.0945 * Z[8] - 0.1871 * Z[11];
  Z[206] = Z[195] - Z[157];
  Z[335] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[204]
              * VAR[8]) + Z[205] * VAR[10]) + Z[206] * VAR[9]) - Z[158] * q_rmDt;
  Z[336] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_rmDt) + Z[207] * VAR[9]) + Z[208] * VAR[10]) + Z[209] * VAR[8];
  Z[201] = ((Z[89] - Z[5] * Z[69]) - Z[10] * Z[31]) - Z[13] * Z[29];
  Z[202] = 0.0945 * Z[10] - 0.1871 * Z[13];
  Z[203] = (Z[10] * Z[30] + Z[13] * Z[68]) - Z[5] * Z[70];
  Z[337] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[148] * VAR[13]) + Z
               [201] * VAR[8]) + Z[202] * VAR[9]) + Z[203] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[338] = (Z[335] * Z[335] + Z[336] * Z[336]) + Z[337] * Z[337];
  Z[339] = Z[338];
  b_sqrt(&Z[339]);
  vrel2_Tx = (Z[4] * ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR
    [13]) + Z[154] * q_rmDt) + Z[207] * VAR[9]) + Z[208] * VAR[10]) + Z[209] *
                      VAR[8]) - Z[2] * ((((((Z[158] * q_rmDt - Z[136] * VAR[11])
    - Z[137] * VAR[12]) - Z[138] * VAR[13]) - Z[204] * VAR[8]) - Z[205] * VAR[10])
    - Z[206] * VAR[9])) / (Z[314] * (0.01 + Z[339]));
  Z[123] = (((0.035 + 0.0945 * Z[13]) + Z[98] * Z[5]) + 0.1871 * Z[10]) - VAR[7];
  Z[256] = std::tanh(11613.5814 * (0.0446 + Z[123]));
  Z[257] = std::abs(0.0446 + Z[123]);
  Z[258] = 80.046 * (1.0 + Z[256]) * rt_powd_snf(Z[257], 0.4688);
  Z[76] = Z[42] + Z[68];
  Z[212] = (Z[4] * Z[70] + Z[9] * Z[45]) + Z[12] * Z[76];
  Z[218] = Z[212] - Z[151];
  Z[213] = (Z[4] * Z[69] + Z[9] * Z[46]) + Z[12] * Z[48];
  Z[219] = Z[213] - Z[150];
  Z[211] = (Z[2] * Z[69] + Z[8] * Z[46]) + Z[11] * Z[48];
  Z[216] = Z[155] + Z[211];
  Z[210] = (Z[2] * Z[70] + Z[8] * Z[45]) + Z[11] * Z[76];
  Z[217] = Z[156] + Z[210];
  Z[340] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[206]
              * VAR[9]) + Z[216] * VAR[8]) + Z[217] * VAR[10]) - Z[158] * q_rmDt;
  Z[341] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_rmDt) + Z[207] * VAR[9]) + Z[218] * VAR[10]) + Z[219] * VAR[8];
  Z[214] = ((Z[100] + Z[10] * Z[46]) + Z[13] * Z[48]) - Z[5] * Z[69];
  Z[215] = (Z[10] * Z[45] + Z[13] * Z[76]) - Z[5] * Z[70];
  Z[342] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[148] * VAR[13]) + Z
               [202] * VAR[9]) + Z[214] * VAR[8]) + Z[215] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[343] = (Z[340] * Z[340] + Z[341] * Z[341]) + Z[342] * Z[342];
  Z[344] = Z[343];
  b_sqrt(&Z[344]);
  vrel3_Tx = (Z[4] * ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR
    [13]) + Z[154] * q_rmDt) + Z[207] * VAR[9]) + Z[218] * VAR[10]) + Z[219] *
                      VAR[8]) - Z[2] * ((((((Z[158] * q_rmDt - Z[136] * VAR[11])
    - Z[137] * VAR[12]) - Z[138] * VAR[13]) - Z[206] * VAR[9]) - Z[216] * VAR[8])
    - Z[217] * VAR[10])) / (Z[314] * (0.01 + Z[344]));
  Z[127] = (((0.035 + 0.0945 * Z[13]) + Z[105] * Z[5]) + 0.1871 * Z[10]) - VAR[7];
  Z[259] = std::tanh(11613.5814 * (0.0446 + Z[127]));
  Z[260] = std::abs(0.0446 + Z[127]);
  Z[261] = 80.046 * (1.0 + Z[259]) * rt_powd_snf(Z[260], 0.4688);
  Z[222] = (Z[4] * Z[69] + Z[9] * Z[54]) + Z[12] * Z[56];
  Z[228] = Z[222] - Z[150];
  Z[80] = Z[42] + Z[76];
  Z[223] = (Z[4] * Z[70] + Z[9] * Z[55]) + Z[12] * Z[80];
  Z[229] = Z[223] - Z[151];
  Z[220] = (Z[2] * Z[69] + Z[8] * Z[54]) + Z[11] * Z[56];
  Z[226] = Z[155] + Z[220];
  Z[221] = (Z[2] * Z[70] + Z[8] * Z[55]) + Z[11] * Z[80];
  Z[227] = Z[156] + Z[221];
  Z[345] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[206]
              * VAR[9]) + Z[226] * VAR[8]) + Z[227] * VAR[10]) - Z[158] * q_rmDt;
  Z[346] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_rmDt) + Z[207] * VAR[9]) + Z[228] * VAR[8]) + Z[229] * VAR[10];
  Z[224] = ((Z[107] + Z[10] * Z[54]) + Z[13] * Z[56]) - Z[5] * Z[69];
  Z[225] = (Z[10] * Z[55] + Z[13] * Z[80]) - Z[5] * Z[70];
  Z[347] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[148] * VAR[13]) + Z
               [202] * VAR[9]) + Z[224] * VAR[8]) + Z[225] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[348] = (Z[345] * Z[345] + Z[346] * Z[346]) + Z[347] * Z[347];
  Z[349] = Z[348];
  b_sqrt(&Z[349]);
  vrel4_Tx = (Z[4] * ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR
    [13]) + Z[154] * q_rmDt) + Z[207] * VAR[9]) + Z[228] * VAR[8]) + Z[229] *
                      VAR[10]) - Z[2] * ((((((Z[158] * q_rmDt - Z[136] * VAR[11])
    - Z[137] * VAR[12]) - Z[138] * VAR[13]) - Z[206] * VAR[9]) - Z[226] * VAR[8])
    - Z[227] * VAR[10])) / (Z[314] * (0.01 + Z[349]));
  Z[131] = (((0.035 + 0.0945 * Z[13]) + Z[112] * Z[5]) + 0.1871 * Z[10]) - VAR[7];
  Z[262] = std::tanh(11613.5814 * (0.0446 + Z[131]));
  Z[263] = std::abs(0.0446 + Z[131]);
  Z[264] = 80.046 * (1.0 + Z[262]) * rt_powd_snf(Z[263], 0.4688);
  Z[232] = (Z[4] * Z[69] + Z[9] * Z[61]) + Z[12] * Z[63];
  Z[238] = Z[232] - Z[150];
  Z[84] = Z[42] + Z[80];
  Z[233] = (Z[4] * Z[70] + Z[9] * Z[62]) + Z[12] * Z[84];
  Z[239] = Z[233] - Z[151];
  Z[230] = (Z[2] * Z[69] + Z[8] * Z[61]) + Z[11] * Z[63];
  Z[236] = Z[155] + Z[230];
  Z[231] = (Z[2] * Z[70] + Z[8] * Z[62]) + Z[11] * Z[84];
  Z[237] = Z[156] + Z[231];
  Z[350] = (((((Z[136] * VAR[11] + Z[137] * VAR[12]) + Z[138] * VAR[13]) + Z[206]
              * VAR[9]) + Z[236] * VAR[8]) + Z[237] * VAR[10]) - Z[158] * q_rmDt;
  Z[351] = (((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_rmDt) + Z[207] * VAR[9]) + Z[238] * VAR[8]) + Z[239] * VAR[10];
  Z[234] = ((Z[114] + Z[10] * Z[61]) + Z[13] * Z[63]) - Z[5] * Z[69];
  Z[235] = (Z[10] * Z[62] + Z[13] * Z[84]) - Z[5] * Z[70];
  Z[352] = ((((((Z[138] * VAR[11] + Z[143] * VAR[12]) + Z[148] * VAR[13]) + Z
               [202] * VAR[9]) + Z[234] * VAR[8]) + Z[235] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[353] = (Z[350] * Z[350] + Z[351] * Z[351]) + Z[352] * Z[352];
  Z[354] = Z[353];
  b_sqrt(&Z[354]);
  vrel1_Tx = (((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154]
              * q_rmDt) + Z[207] * VAR[9];
  Ft8 = ((Z[158] * q_rmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z[138] *
    VAR[13];
  vrel2_Ny = Z[206] * VAR[9];
  vrel8_Tx = (Z[4] * ((vrel1_Tx + Z[238] * VAR[8]) + Z[239] * VAR[10]) - Z[2] *
              (((Ft8 - vrel2_Ny) - Z[236] * VAR[8]) - Z[237] * VAR[10])) / (Z
    [314] * (0.01 + Z[354]));
  Ft8 = ((Ft8 - Z[204] * VAR[8]) - Z[205] * VAR[10]) - vrel2_Ny;
  vrel1_Tx = -0.058778525229247328 * (0.5 + 0.5 * std::tanh(-3.0 + 30.0 * (Z[4] *
    ((vrel1_Tx + Z[208] * VAR[10]) + Z[209] * VAR[8]) - Z[2] * Ft8) / Z[314])) *
    (((Z[255] * vrel2_Tx + Z[258] * vrel3_Tx) + Z[261] * vrel4_Tx) + Z[264] *
     vrel8_Tx) / (1.0 - 0.058778525229247328 * vrel2_Tx);
  Fn5 = Z[255] - vrel1_Tx;
  *vrel5_Nx = -Ft8 / (0.01 + Z[339]);
  Z[375] = Z[371] - 0.1 * Fn5 * *vrel5_Nx;
  vrel6_Nx = -((((((Z[158] * q_rmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z
                  [138] * VAR[13]) - Z[206] * VAR[9]) - Z[216] * VAR[8]) - Z[217]
               * VAR[10]) / (0.01 + Z[344]);
  Z[377] = 0.1 * Z[258] * vrel6_Nx;
  Z[379] = Z[375] - Z[377];
  vrel7_Nx = -((((((Z[158] * q_rmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z
                  [138] * VAR[13]) - Z[206] * VAR[9]) - Z[226] * VAR[8]) - Z[227]
               * VAR[10]) / (0.01 + Z[349]);
  Z[381] = 0.1 * Z[261] * vrel7_Nx;
  Z[383] = Z[379] - Z[381];
  vrel2_Ny = (((((Z[158] * q_rmDt - Z[136] * VAR[11]) - Z[137] * VAR[12]) - Z
                [138] * VAR[13]) - Z[206] * VAR[9]) - Z[236] * VAR[8]) - Z[237] *
    VAR[10];
  Ft8 = 0.0798635510047293 * (0.5 - 0.5 * std::tanh(3.0 + 30.0 * (Z[4] *
    ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154] *
        q_rmDt) + Z[207] * VAR[9]) + Z[238] * VAR[8]) + Z[239] * VAR[10]) - Z[2]
    * vrel2_Ny) / Z[314])) * (((Z[255] * vrel2_Tx + Z[258] * vrel3_Tx) + Z[261] *
    vrel4_Tx) + Z[264] * vrel8_Tx) / (1.0 + 0.0798635510047293 * vrel8_Tx);
  Fn8 = Z[264] - Ft8;
  *vrel8_Nx = -vrel2_Ny / (0.01 + Z[354]);
  Z[387] = Z[383] - 0.1 * Fn8 * *vrel8_Nx;
  Z[355] = Z[243] - Ft1;
  Z[356] = Z[252] - Ft4;
  Z[357] = Z[255] - vrel1_Tx;
  Z[358] = Z[264] - Ft8;
  Z_tmp = (Z[2] * Z[5] - Z[8] * Z[10]) - Z[11] * Z[13];
  Z[476] = (((((((Z[387] - Z[246] * Z_tmp) - Z[249] * Z_tmp) - Z[258] * Z_tmp) -
               Z[261] * Z_tmp) - Z[355] * Z_tmp) - Z[356] * Z_tmp) - Z[357] *
            Z_tmp) - Z[358] * Z_tmp;
  Z[485] = Z[476] / 14.0;
  VARp[11] = Z[485];
  Ft8 = (((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154] *
         q_lmDt) + Z[162] * VAR[9];
  vrel8_Tx = ((Ft8 + Z[163] * VAR[10]) + Z[164] * VAR[8]) / (0.01 + Z[319]);
  vrel2_Ny = ((Ft8 + Z[173] * VAR[10]) + Z[174] * VAR[8]) / (0.01 + Z[324]);
  Z[362] = 0.1 * Z[246] * vrel2_Ny;
  Z[364] = -(0.1 * Fn1 * vrel8_Tx) - Z[362];
  vrel1_Tx = ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z
                 [154] * q_lmDt) + Z[162] * VAR[9]) + Z[183] * VAR[8]) + Z[184] *
              VAR[10]) / (0.01 + Z[329]);
  Z[366] = 0.1 * Z[249] * vrel1_Tx;
  Z[368] = Z[364] - Z[366];
  vrel2_Tx = ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z
                 [154] * q_lmDt) + Z[162] * VAR[9]) + Z[193] * VAR[8]) + Z[194] *
              VAR[10]) / (0.01 + Z[334]);
  Z[372] = Z[368] - 0.1 * Fn4 * vrel2_Tx;
  vrel3_Tx = ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z
                 [154] * q_rmDt) + Z[207] * VAR[9]) + Z[208] * VAR[10]) + Z[209]
              * VAR[8]) / (0.01 + Z[339]);
  Z[376] = Z[372] - 0.1 * Fn5 * vrel3_Tx;
  vrel4_Tx = ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z
                 [154] * q_rmDt) + Z[207] * VAR[9]) + Z[218] * VAR[10]) + Z[219]
              * VAR[8]) / (0.01 + Z[344]);
  Z[378] = 0.1 * Z[258] * vrel4_Tx;
  Z[380] = Z[376] - Z[378];
  Ft4 = ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154] *
            q_rmDt) + Z[207] * VAR[9]) + Z[228] * VAR[8]) + Z[229] * VAR[10]) /
    (0.01 + Z[349]);
  Z[382] = 0.1 * Z[261] * Ft4;
  Z[384] = Z[380] - Z[382];
  Ft1 = ((((((Z[137] * VAR[11] + Z[142] * VAR[12]) + Z[143] * VAR[13]) + Z[154] *
            q_rmDt) + Z[207] * VAR[9]) + Z[238] * VAR[8]) + Z[239] * VAR[10]) /
    (0.01 + Z[354]);
  Z[388] = Z[384] - 0.1 * Fn8 * Ft1;
  Z_tmp = (Z[4] * Z[5] - Z[9] * Z[10]) - Z[12] * Z[13];
  Z[477] = (((((((Z[388] - Z[246] * Z_tmp) - Z[249] * Z_tmp) - Z[258] * Z_tmp) -
               Z[261] * Z_tmp) - Z[355] * Z_tmp) - Z[356] * Z_tmp) - Z[357] *
            Z_tmp) - Z[358] * Z_tmp;
  Z[486] = Z[477] / 14.0;
  VARp[12] = Z[486];
  Z[267] = Z[88] * Z[89];
  Z[268] = 0.0945 * Z[88];
  Z[266] = 0.3742 * Z[88];
  Z[269] = ((Z[267] * VAR[8] + Z[268] * Z[20]) - Z[88] * VAR[13]) - 0.5 * Z[266]
    * Z[18];
  Z[265] = Z[88] * Z[88];
  Z[270] = 100.0 * Z[88] * Z[269] / Z[265];
  Z[273] = Z[99] * Z[100];
  Z[274] = 0.0945 * Z[99];
  Z[272] = 0.3742 * Z[99];
  Z[275] = ((Z[273] * VAR[8] + Z[274] * Z[20]) - Z[99] * VAR[13]) - 0.5 * Z[272]
    * Z[18];
  Z[271] = Z[99] * Z[99];
  Z[276] = 100.0 * Z[99] * Z[275] / Z[271];
  Z[279] = Z[106] * Z[107];
  Z[280] = 0.0945 * Z[106];
  Z[278] = 0.3742 * Z[106];
  Z[281] = ((Z[279] * VAR[8] + Z[280] * Z[20]) - Z[106] * VAR[13]) - 0.5 * Z[278]
    * Z[18];
  Z[277] = Z[106] * Z[106];
  Z[282] = 100.0 * Z[106] * Z[281] / Z[277];
  Z[285] = Z[113] * Z[114];
  Z[286] = 0.0945 * Z[113];
  Z[284] = 0.3742 * Z[113];
  Z[287] = ((Z[285] * VAR[8] + Z[286] * Z[20]) - Z[113] * VAR[13]) - 0.5 * Z[284]
    * Z[18];
  Z[283] = Z[113] * Z[113];
  Z[288] = 100.0 * Z[113] * Z[287] / Z[283];
  Z[290] = Z[89] * Z[119];
  Z[291] = 0.0945 * Z[119];
  Z[292] = 0.3742 * Z[119];
  Z[293] = ((Z[290] * VAR[8] + Z[291] * Z[20]) + 0.5 * Z[292] * Z[18]) - Z[119] *
    VAR[13];
  Z[289] = Z[119] * Z[119];
  Z[294] = 100.0 * Z[119] * Z[293] / Z[289];
  Z[296] = Z[100] * Z[123];
  Z[297] = 0.0945 * Z[123];
  Z[298] = 0.3742 * Z[123];
  Z[299] = ((Z[296] * VAR[8] + Z[297] * Z[20]) + 0.5 * Z[298] * Z[18]) - Z[123] *
    VAR[13];
  Z[295] = Z[123] * Z[123];
  Z[300] = 100.0 * Z[123] * Z[299] / Z[295];
  Z[302] = Z[107] * Z[127];
  Z[303] = 0.0945 * Z[127];
  Z[304] = 0.3742 * Z[127];
  Z[305] = ((Z[302] * VAR[8] + Z[303] * Z[20]) + 0.5 * Z[304] * Z[18]) - Z[127] *
    VAR[13];
  Z[301] = Z[127] * Z[127];
  Z[306] = 100.0 * Z[127] * Z[305] / Z[301];
  Z[308] = Z[114] * Z[131];
  Z[309] = 0.0945 * Z[131];
  Z[310] = 0.3742 * Z[131];
  Z[311] = ((Z[308] * VAR[8] + Z[309] * Z[20]) + 0.5 * Z[310] * Z[18]) - Z[131] *
    VAR[13];
  Z[307] = Z[131] * Z[131];
  Z[312] = 100.0 * Z[131] * Z[311] / Z[307];
  Z_tmp = (Z[5] * Z[5] + Z[10] * Z[10]) + Z[13] * Z[13];
  Z[478] = (((((((((((((((Z[246] * Z_tmp + Z[249] * Z_tmp) + Z[258] * Z_tmp) +
                        Z[261] * Z_tmp) + Z[355] * Z_tmp) + Z[356] * Z_tmp) + Z
                     [357] * Z_tmp) + Z[358] * Z_tmp) + Z[270]) + Z[276]) + Z
                 [282]) + Z[288]) + Z[294]) + Z[300]) + Z[306]) + Z[312]) - Z
    [240];
  Z[487] = Z[478] / 14.0;
  VARp[13] = Z[487];
  Z[454] = 0.46277 * Z[6];
  Z[450] = 0.33886 * Z[7];
  Z[459] = Z[6] * Z[454] + Z[7] * Z[450];
  Z[488] = 0.23479 * Z[459];
  Z[444] = Z[13] * VAR[10] - Z[6] * VAR[8];
  Z[442] = VAR[9] - Z[5] * VAR[10];
  Z[445] = 0.23479 * Z[442];
  Z[447] = 0.46277 * Z[444];
  Z[457] = Z[444] * Z[445] - Z[442] * Z[447];
  Z[443] = Z[7] * VAR[8] + Z[10] * VAR[10];
  Z[446] = 0.33886 * Z[443];
  Z[456] = Z[442] * Z[446] - Z[443] * Z[445];
  Z[17] = Z[0] * VAR[8] * VAR[10];
  Z[449] = 0.23479 * Z[17];
  Z[19] = VAR[10] * Z[18] - Z[6] * VAR[8] * VAR[9];
  Z[452] = 0.33886 * Z[19];
  Z[21] = VAR[10] * Z[20] - Z[7] * VAR[8] * VAR[9];
  Z[455] = 0.46277 * Z[21];
  Z[458] = Z[443] * Z[447] - Z[444] * Z[446];
  Z[465] = ((((Z[10] * Z[457] + Z[13] * Z[456]) + Z[5] * Z[449]) + Z[10] * Z[452])
            + Z[13] * Z[455]) - Z[5] * Z[458];
  Z[392] = 0.1 * Fn1 * (((((0.3742 * Z[8] * vrel8_Tx + 0.189 * Z[12] * *vrel1_Nx)
    + 0.29654 * Z[2] * vrel8_Tx) - 0.189 * Z[11] * vrel8_Tx) - 0.29654 * Z[4] * *
    vrel1_Nx) - 0.3742 * Z[9] * *vrel1_Nx);
  Z[396] = 0.1 * Z[246] * (((((0.3742 * Z[8] * vrel2_Ny + 0.189 * Z[12] *
    vrel2_Nx) + 2.0 * Z[98] * Z[2] * vrel2_Ny) - 0.189 * Z[11] * vrel2_Ny) - 2.0
    * Z[98] * Z[4] * vrel2_Nx) - 0.3742 * Z[9] * vrel2_Nx);
  Z[399] = -0.5 * Z[392] - 0.5 * Z[396];
  Z[403] = 0.1 * Z[249] * (((((0.3742 * Z[8] * vrel1_Tx + 0.189 * Z[12] *
    vrel3_Nx) + 2.0 * Z[105] * Z[2] * vrel1_Tx) - 0.189 * Z[11] * vrel1_Tx) -
    2.0 * Z[105] * Z[4] * vrel3_Nx) - 0.3742 * Z[9] * vrel3_Nx);
  Z[406] = Z[399] - 0.5 * Z[403];
  Z[410] = 0.1 * Fn4 * (((((0.3742 * Z[8] * vrel2_Tx + 0.189 * Z[12] * *vrel4_Nx)
    + 2.0 * Z[112] * Z[2] * vrel2_Tx) - 0.189 * Z[11] * vrel2_Tx) - 2.0 * Z[112]
    * Z[4] * *vrel4_Nx) - 0.3742 * Z[9] * *vrel4_Nx);
  Z[413] = Z[406] - 0.5 * Z[410];
  Z[417] = 0.1 * Fn5 * (((((0.3742 * Z[9] * *vrel5_Nx + 0.189 * Z[12] *
    *vrel5_Nx) + 0.29654 * Z[2] * vrel3_Tx) - 0.189 * Z[11] * vrel3_Tx) -
    0.29654 * Z[4] * *vrel5_Nx) - 0.3742 * Z[8] * vrel3_Tx);
  Z[420] = Z[413] - 0.5 * Z[417];
  Z[424] = 0.1 * Z[258] * (((((0.3742 * Z[9] * vrel6_Nx + 0.189 * Z[12] *
    vrel6_Nx) + 2.0 * Z[98] * Z[2] * vrel4_Tx) - 0.189 * Z[11] * vrel4_Tx) - 2.0
    * Z[98] * Z[4] * vrel6_Nx) - 0.3742 * Z[8] * vrel4_Tx);
  Z[427] = Z[420] - 0.5 * Z[424];
  Z[431] = 0.1 * Z[261] * (((((0.3742 * Z[9] * vrel7_Nx + 0.189 * Z[12] *
    vrel7_Nx) + 2.0 * Z[105] * Z[2] * Ft4) - 0.189 * Z[11] * Ft4) - 2.0 * Z[105]
    * Z[4] * vrel7_Nx) - 0.3742 * Z[8] * Ft4);
  Z[434] = Z[427] - 0.5 * Z[431];
  Z[438] = 0.1 * Fn8 * (((((0.3742 * Z[9] * *vrel8_Nx + 0.189 * Z[12] *
    *vrel8_Nx) + 2.0 * Z[112] * Z[2] * Ft1) - 0.189 * Z[11] * Ft1) - 2.0 * Z[112]
    * Z[4] * *vrel8_Nx) - 0.3742 * Z[8] * Ft1);
  Z[441] = Z[434] - 0.5 * Z[438];
  Z[389] = Z[88] - 0.035;
  Z[390] = 0.1 * Fn1 * (((2.0 * Z[389] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
                        0.29654 * Z[5]) * vrel8_Tx;
  Z[393] = Z[99] - 0.035;
  Z[394] = 0.1 * Z[246] * (((2.0 * Z[393] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[98] * Z[5]) * vrel2_Ny;
  Z[397] = 0.5 * Z[390] + 0.5 * Z[394];
  Z[400] = Z[106] - 0.035;
  Z[401] = 0.1 * Z[249] * (((2.0 * Z[400] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[105] * Z[5]) * vrel1_Tx;
  Z[404] = Z[397] + 0.5 * Z[401];
  Z[407] = Z[113] - 0.035;
  Z[408] = 0.1 * Fn4 * (((2.0 * Z[407] + 0.3742 * Z[10]) - 0.189 * Z[13]) - 2.0 *
                        Z[112] * Z[5]) * vrel2_Tx;
  Z[411] = Z[404] + 0.5 * Z[408];
  Z[414] = Z[119] - 0.035;
  Z[415] = 0.1 * Fn5 * (((2.0 * Z[414] - 0.189 * Z[13]) - 0.29654 * Z[5]) -
                        0.3742 * Z[10]) * vrel3_Tx;
  Z[418] = Z[411] + 0.5 * Z[415];
  Z[421] = Z[123] - 0.035;
  Z[422] = 0.1 * Z[258] * (((2.0 * Z[421] - 0.189 * Z[13]) - 2.0 * Z[98] * Z[5])
    - 0.3742 * Z[10]) * vrel4_Tx;
  Z[425] = Z[418] + 0.5 * Z[422];
  Z[428] = Z[127] - 0.035;
  Z[429] = 0.1 * Z[261] * (((2.0 * Z[428] - 0.189 * Z[13]) - 2.0 * Z[105] * Z[5])
    - 0.3742 * Z[10]) * Ft4;
  Z[432] = Z[425] + 0.5 * Z[429];
  Z[435] = Z[131] - 0.035;
  Z[436] = 0.1 * Fn8 * (((2.0 * Z[435] - 0.189 * Z[13]) - 2.0 * Z[112] * Z[5]) -
                        0.3742 * Z[10]) * Ft1;
  Z[439] = Z[432] + 0.5 * Z[436];
  Z[391] = 0.1 * Fn1 * (((2.0 * Z[389] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
                        0.29654 * Z[5]) * *vrel1_Nx;
  Z[395] = 0.1 * Z[246] * (((2.0 * Z[393] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[98] * Z[5]) * vrel2_Nx;
  Z[398] = -0.5 * Z[391] - 0.5 * Z[395];
  Z[402] = 0.1 * Z[249] * (((2.0 * Z[400] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[105] * Z[5]) * vrel3_Nx;
  Z[405] = Z[398] - 0.5 * Z[402];
  Z[409] = 0.1 * Fn4 * (((2.0 * Z[407] + 0.3742 * Z[10]) - 0.189 * Z[13]) - 2.0 *
                        Z[112] * Z[5]) * *vrel4_Nx;
  Z[412] = Z[405] - 0.5 * Z[409];
  Z[416] = 0.1 * Fn5 * (((2.0 * Z[414] - 0.189 * Z[13]) - 0.29654 * Z[5]) -
                        0.3742 * Z[10]) * *vrel5_Nx;
  Z[419] = Z[412] - 0.5 * Z[416];
  Z[423] = 0.1 * Z[258] * (((2.0 * Z[421] - 0.189 * Z[13]) - 2.0 * Z[98] * Z[5])
    - 0.3742 * Z[10]) * vrel6_Nx;
  Z[426] = Z[419] - 0.5 * Z[423];
  Z[430] = 0.1 * Z[261] * (((2.0 * Z[428] - 0.189 * Z[13]) - 2.0 * Z[105] * Z[5])
    - 0.3742 * Z[10]) * vrel7_Nx;
  Z[433] = Z[426] - 0.5 * Z[430];
  Z[437] = 0.1 * Fn8 * (((2.0 * Z[435] - 0.189 * Z[13]) - 2.0 * Z[112] * Z[5]) -
                        0.3742 * Z[10]) * *vrel8_Nx;
  Z[440] = Z[433] - 0.5 * Z[437];
  Z_tmp = Z[5] * Z[33];
  Ft8 = Z[10] * Z[45];
  vrel2_Ny = Z[5] * Z[70];
  vrel1_Tx = Z[10] * Z[55];
  vrel2_Tx = Z[10] * Z[30];
  vrel3_Tx = Z[10] * Z[62];
  Z[481] = (((((((((((((((Z[5] * Z[5] * Z[441] + Z[8] * Z[10] * Z[439]) + Z[9] *
    Z[10] * Z[440]) + Z[10] * Z[10] * Z[441]) + Z[11] * Z[13] * Z[439]) + Z[12] *
                      Z[13] * Z[440]) + Z[13] * Z[13] * Z[441]) - Z[246] *
                    ((Z_tmp - Ft8) - Z[13] * Z[47])) - Z[249] * ((Z_tmp -
    vrel1_Tx) - Z[13] * Z[57])) - Z[258] * ((vrel2_Ny - Ft8) - Z[13] * Z[76])) -
                 Z[261] * ((vrel2_Ny - vrel1_Tx) - Z[13] * Z[80])) - Z[355] *
                ((Z_tmp - vrel2_Tx) - Z[13] * Z[28])) - Z[356] * ((Z_tmp -
    vrel3_Tx) - Z[13] * Z[64])) - Z[357] * ((vrel2_Ny - vrel2_Tx) - Z[13] * Z[68]))
             - Z[358] * ((vrel2_Ny - vrel3_Tx) - Z[13] * Z[84])) - Z[2] * Z[5] *
            Z[439]) - Z[4] * Z[5] * Z[440];
  Z[484] = Z[465] - Z[481];
  Z[448] = 0.23479 * Z[5];
  Z[489] = Z[448] * Z[459];
  Z[462] = Z[458] - Z[449];
  Z[467] = Z[0] * (0.3742 * Z[7] + 0.189 * Z[6]);
  Z[472] = Z[0] * (0.3742 * Z[7] - 0.189 * Z[6]);
  Z_tmp = 0.3742 * Z[13] + 0.189 * Z[10];
  Ft8 = 0.3742 * Z[13] - 0.189 * Z[10];
  Z[480] = (((((((((((((((((0.5 * Z[246] * Z_tmp + 0.5 * Z[249] * Z_tmp) + 0.5 *
    Z[355] * Z_tmp) + 0.5 * Z[356] * Z_tmp) + Z[2] * Z[439]) + Z[4] * Z[440]) +
                       0.5 * Z[467] * Z[270]) + 0.5 * Z[467] * Z[276]) + 0.5 *
                     Z[467] * Z[282]) + 0.5 * Z[467] * Z[288]) - 0.5 * Z[258] *
                   Ft8) - 0.5 * Z[261] * Ft8) - 0.5 * Z[357] * Ft8) - 0.5 * Z
                [358] * Ft8) - Z[5] * Z[441]) - 0.5 * Z[472] * Z[294]) - 0.5 *
             Z[472] * Z[300]) - 0.5 * Z[472] * Z[306]) - 0.5 * Z[472] * Z[312];
  Z[483] = Z[462] - Z[480];
  Z[463] = Z[10] * Z[450] - Z[13] * Z[454];
  Z[494] = 0.23479 * Z[463];
  Z[461] = ((Z[7] * Z[457] + Z[7] * Z[452]) - Z[6] * Z[456]) - Z[6] * Z[455];
  Z[466] = (0.0945 * Z[5] * Z[7] - Z[89]) - 0.1871 * Z[5] * Z[6];
  Z[468] = (0.0945 * Z[5] * Z[7] - Z[100]) - 0.1871 * Z[5] * Z[6];
  Z[469] = (0.0945 * Z[5] * Z[7] - Z[107]) - 0.1871 * Z[5] * Z[6];
  Z[470] = (0.0945 * Z[5] * Z[7] - Z[114]) - 0.1871 * Z[5] * Z[6];
  Z[471] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[89];
  Z[473] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[100];
  Z[474] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[107];
  Z[475] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[114];
  Z_tmp = Z[10] * Z[31];
  Ft8 = Z[13] * Z[29];
  vrel2_Ny = Z[5] * Z[32];
  vrel1_Tx = Z[5] * Z[69];
  vrel2_Tx = Z[10] * Z[46];
  vrel3_Tx = Z[13] * Z[48];
  vrel4_Tx = Z[10] * Z[54];
  Ft4 = Z[13] * Z[56];
  Ft1 = Z[10] * Z[61];
  vrel8_Tx = Z[13] * Z[63];
  Z[479] = ((((((((((((((((((((Z[466] * Z[270] + Z[468] * Z[276]) + Z[469] * Z
    [282]) + Z[470] * Z[288]) + Z[471] * Z[294]) + Z[473] * Z[300]) + Z[474] *
    Z[306]) + Z[475] * Z[312]) + Z[7] * Z[8] * Z[439]) + Z[7] * Z[9] * Z[440]) +
                      Z[7] * Z[10] * Z[441]) - Z[355] * ((vrel2_Ny + Z_tmp) +
    Ft8)) - Z[357] * ((vrel1_Tx + Z_tmp) + Ft8)) - Z[246] * ((vrel2_Ny -
    vrel2_Tx) - vrel3_Tx)) - Z[249] * ((vrel2_Ny - vrel4_Tx) - Ft4)) - Z[258] *
                 ((vrel1_Tx - vrel2_Tx) - vrel3_Tx)) - Z[261] * ((vrel1_Tx -
    vrel4_Tx) - Ft4)) - Z[356] * ((vrel2_Ny - Ft1) - vrel8_Tx)) - Z[358] *
              ((vrel1_Tx - Ft1) - vrel8_Tx)) - Z[6] * Z[11] * Z[439]) - Z[6] *
            Z[12] * Z[440]) - Z[6] * Z[13] * Z[441];
  Z[482] = Z[461] - Z[479];
  Z[451] = 0.33886 * Z[10];
  Z[453] = 0.46277 * Z[13];
  Z[464] = (Z[5] * Z[448] + Z[10] * Z[451]) + Z[13] * Z[453];
  Z[460] = Z[7] * Z[451] - Z[6] * Z[453];
  Z[490] = 0.23479 * Z[460];
  Z[491] = (Z[464] * Z[488] - Z[448] * Z[489]) - Z[463] * Z[490];
  Z[499] = ((Z[488] * Z[484] + Z[489] * Z[483]) - Z[494] * Z[482]) / Z[491];
  VARp[10] = -Z[499];
  Z[492] = 0.23479 * Z[464] - Z[448] * Z[448];
  Z[495] = Z[448] * Z[460];
  Z[497] = ((Z[492] * Z[482] - Z[490] * Z[484]) - Z[495] * Z[483]) / Z[491];
  VARp[8] = -Z[497];
  Z[493] = Z[448] * Z[463];
  Z[496] = Z[459] * Z[464] - Z[460] * Z[463];
  Z[498] = ((Z[493] * Z[482] - Z[489] * Z[484]) - Z[496] * Z[483]) / Z[491];
  VARp[9] = Z[498];

  // =========================================================================== 
  // =========================================================================== 
  VARp[0] = VAR[8];
  VARp[1] = VAR[9];
  VARp[2] = VAR[10];
  VARp[3] = q_lmDt;
  VARp[4] = q_rmDt;
  VARp[5] = VAR[11];
  VARp[6] = VAR[12];
  VARp[7] = VAR[13];

  // ==============================
  //  End of function agbot
  // ==============================
}

//
// File trailer for AgBot_simulinkfunction.cpp
//
// [EOF]
//
