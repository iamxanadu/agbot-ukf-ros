//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: agbot_simulinkblock_20191202.cpp
//
// MATLAB Coder version            : 4.2
// C/C++ source code generated on  : 03-Dec-2019 16:27:42
//

// Include Files
#include <cmath>
#include <math.h>
#include "rt_nonfinite.h"
#include "agbot_simulinkblock_20191202.h"
#include "sqrt.h"

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions

//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  double d0;
  double d1;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = rtNaN;
  } else {
    d0 = std::abs(u0);
    d1 = std::abs(u1);
    if (rtIsInf(u1)) {
      if (d0 == 1.0) {
        y = 1.0;
      } else if (d0 > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

//
// Arguments    : double q_lmDt
//                double q_rmDt
//                const double VAR[14]
//                double VARp[14]
//                double *ax_imu
//                double *ay_imu
//                double *az_imu
//                double *wx_imu
//                double *wy_imu
//                double *wz_imu
// Return Type  : void
//
void agbot_simulinkblock_20191202(double q_lmDt, double q_rmDt, const double
  VAR[14], double VARp[14], double *ax_imu, double *ay_imu, double *az_imu,
  double *wx_imu, double *wy_imu, double *wz_imu)
{
  double Z[512];
  double vrel1_Tx;
  double vrel2_Tx;
  double vrel3_Tx;
  double Ft8;
  double vrel2_Ny;
  double vrel4_Tx;
  double vrel3_Ny;
  double Ft1;
  double Fn1;
  double vrel1_Nx;
  double vrel2_Nx;
  double vrel3_Nx;
  double Ft4;
  double Fn4;
  double vrel4_Nx;
  double Ft5;
  double Fn5;
  double vrel5_Nx;
  double vrel6_Nx;
  double vrel7_Nx;
  double Fn8;
  double vrel8_Nx;

  // -------------------------------+--------------------------+-------------------+----------------- 
  //  Quantity                      | Value                    | Units             | Description 
  // -------------------------------|--------------------------|-------------------|----------------- 
  //  m                   Constant
  //  N*s/m               Constant
  //  noUnits             Constant
  //  1/m                 Constant
  //  m/s                 Constant
  //  m/s^2               Constant
  //  m                   Constant
  //  kg*m^2              Constant
  //  kg*m^2              Constant
  //  kg*m^2              Constant
  //  s/m                 Constant
  //  s/rad               Constant
  //  1/N                 Constant
  //  N                   Constant
  //  m                   Constant
  //  m                   Constant
  //  m                   Constant
  //  m                   Constant
  //  m                   Constant
  //  m                   Constant
  //  kg                  Constant
  //  noUnits             Constant
  //  N*s/rad             Constant
  //  noUnits             Constant
  //  noUnits             Constant
  //  m                   Constant
  //  deg                 Constant
  //  deg                 Constant
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  deg                 Initial Value
  //  m                   Initial Value
  //  m                   Initial Value
  //  m                   Initial Value
  //  rad/sec             Initial Value
  //  rad/sec             Initial Value
  //  rad/sec             Initial Value
  //  m/s                 Initial Value
  //  m/s                 Initial Value
  //  m/s                 Initial Value
  // -------------------------------+--------------------------+-------------------+----------------- 
  //  Unit conversions
  //  Evaluate constants
  Z[52] = 0.090666666666666673;
  Z[110] = 0.05760333333333334;
  Z[117] = -0.033063333333333333;
  Z[124] = -0.12373;
  Z[165] = 0.037765;
  Z[252] = 137.29309999999998;

  // =========================================================================== 
  // =========================================================================== 
  // =========================================================================== 
  // =========================================================================== 
  Z[0] = std::cos(VAR[0]);
  Z[7] = std::cos(VAR[1]);
  Z[13] = Z[0] * Z[7];
  Z[5] = std::sin(VAR[0]);
  Z[6] = std::sin(VAR[1]);
  Z[10] = Z[0] * Z[6];
  Z[100] = (((0.035 + 0.0945 * Z[13]) + 0.14827 * Z[5]) - VAR[7]) - 0.1871 * Z
    [10];
  Z[253] = std::tanh(11613.5814 * (0.0446 + Z[100]));
  Z[254] = std::abs(0.0446 + Z[100]);
  Z[255] = 80.046 * (1.0 + Z[253]) * rt_powd_snf(Z[254], 0.4688);
  Z[3] = std::sin(VAR[2]);
  Z[4] = Z[0] * Z[3];
  Z[1] = std::cos(VAR[2]);
  Z[2] = Z[0] * Z[1];
  Z[8] = Z[1] * Z[5] * Z[6] - Z[3] * Z[7];
  Z[9] = Z[1] * Z[7] + Z[3] * Z[5] * Z[6];
  Z[11] = Z[3] * Z[6] + Z[1] * Z[5] * Z[7];
  Z[12] = Z[3] * Z[5] * Z[7] - Z[1] * Z[6];
  Z[149] = (Z[2] * Z[4] + Z[8] * Z[9]) + Z[11] * Z[12];
  Z[154] = (Z[4] * Z[4] + Z[9] * Z[9]) + Z[12] * Z[12];
  Z[155] = (Z[9] * Z[10] + Z[12] * Z[13]) - Z[4] * Z[5];
  Z[166] = 0.037765 * Z[8];
  Z[153] = 0.0945 * Z[9] + 0.1871 * Z[12];
  Z[164] = 0.035 * Z[2];
  Z[174] = Z[153] + Z[164];
  Z[45] = -0.0945 * Z[10] - 0.1871 * Z[13];
  Z[42] = 0.14827 * Z[13] - 0.0945 * Z[5];
  Z[40] = -0.14827 * Z[10] - 0.1871 * Z[5];
  Z[156] = (Z[4] * Z[45] + Z[9] * Z[42]) + Z[12] * Z[40];
  Z[163] = 0.035 * ((Z[2] * Z[5] - Z[8] * Z[10]) - Z[11] * Z[13]);
  Z[175] = Z[156] - Z[163];
  Z[44] = 0.1871 * Z[6] - 0.0945 * Z[7];
  Z[43] = 0.14827 * Z[6];
  Z[41] = 0.14827 * Z[7];
  Z[157] = (Z[4] * Z[44] - Z[9] * Z[43]) - Z[12] * Z[41];
  Z[162] = 0.035 * (Z[6] * Z[11] - Z[7] * Z[8]);
  Z[176] = Z[157] - Z[162];
  Z[170] = 0.037765 * Z[9];
  Z[148] = (Z[2] * Z[2] + Z[8] * Z[8]) + Z[11] * Z[11];
  Z[150] = (Z[8] * Z[10] + Z[11] * Z[13]) - Z[2] * Z[5];
  Z[147] = 0.0945 * Z[8] + 0.1871 * Z[11];
  Z[169] = 0.035 * Z[4];
  Z[171] = Z[147] - Z[169];
  Z[151] = (Z[2] * Z[45] + Z[8] * Z[42]) + Z[11] * Z[40];
  Z[168] = 0.035 * ((Z[4] * Z[5] - Z[9] * Z[10]) - Z[12] * Z[13]);
  Z[172] = Z[151] + Z[168];
  Z[152] = (Z[2] * Z[44] - Z[8] * Z[43]) - Z[11] * Z[41];
  Z[167] = 0.035 * (Z[6] * Z[12] - Z[7] * Z[9]);
  Z[173] = Z[152] + Z[167];
  Z[325] = Z[2] * Z[2] + Z[4] * Z[4];
  Z[326] = Z[325];
  b_sqrt(&Z[326]);
  Z[327] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[171]
              * VAR[9]) + Z[172] * VAR[10]) + Z[173] * VAR[8]) - Z[170] * q_lmDt;
  Z[328] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_lmDt) + Z[174] * VAR[9]) + Z[175] * VAR[10]) + Z[176] * VAR[8];
  Z[101] = 0.14827 * Z[0];
  Z[158] = ((Z[101] - Z[5] * Z[44]) - Z[10] * Z[43]) - Z[13] * Z[41];
  Z[159] = 0.0945 * Z[10] + 0.1871 * Z[13];
  Z[160] = ((-1.0 + Z[5] * Z[5]) + Z[10] * Z[10]) + Z[13] * Z[13];
  Z[161] = (Z[10] * Z[42] + Z[13] * Z[40]) - Z[5] * Z[45];
  Z[20] = -Z[0] * Z[6] * VAR[9] - Z[5] * Z[7] * VAR[8];
  Z[18] = Z[0] * Z[7] * VAR[9] - Z[5] * Z[6] * VAR[8];
  Z[329] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[158] * VAR[8]) + Z[159]
               * VAR[9]) + Z[160] * VAR[13]) + Z[161] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[330] = (Z[327] * Z[327] + Z[328] * Z[328]) + Z[329] * Z[329];
  Z[331] = Z[330];
  b_sqrt(&Z[331]);
  vrel1_Tx = (Z[4] * ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR
    [13]) + Z[166] * q_lmDt) + Z[174] * VAR[9]) + Z[175] * VAR[10]) + Z[176] *
                      VAR[8]) - Z[2] * ((((((Z[170] * q_lmDt - Z[148] * VAR[11])
    - Z[149] * VAR[12]) - Z[150] * VAR[13]) - Z[171] * VAR[9]) - Z[172] * VAR[10])
    - Z[173] * VAR[8])) / (Z[326] * (0.01 + Z[331]));
  Z[111] = (((0.035 + 0.0945 * Z[13]) + Z[110] * Z[5]) - VAR[7]) - 0.1871 * Z[10];
  Z[256] = std::tanh(11613.5814 * (0.0446 + Z[111]));
  Z[257] = std::abs(0.0446 + Z[111]);
  Z[258] = 80.046 * (1.0 + Z[256]) * rt_powd_snf(Z[257], 0.4688);
  Z[56] = Z[52] * Z[13];
  Z[57] = Z[42] - Z[56];
  Z[54] = Z[52] * Z[10];
  Z[59] = Z[40] + Z[54];
  Z[179] = (Z[4] * Z[45] + Z[9] * Z[57]) + Z[12] * Z[59];
  Z[185] = Z[179] - Z[163];
  Z[55] = Z[52] * Z[6];
  Z[58] = Z[55] - Z[43];
  Z[53] = Z[52] * Z[7];
  Z[60] = Z[53] - Z[41];
  Z[180] = (Z[4] * Z[44] + Z[9] * Z[58]) + Z[12] * Z[60];
  Z[186] = Z[180] - Z[162];
  Z[178] = (Z[2] * Z[44] + Z[8] * Z[58]) + Z[11] * Z[60];
  Z[183] = Z[167] + Z[178];
  Z[177] = (Z[2] * Z[45] + Z[8] * Z[57]) + Z[11] * Z[59];
  Z[184] = Z[168] + Z[177];
  Z[332] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[171]
              * VAR[9]) + Z[183] * VAR[8]) + Z[184] * VAR[10]) - Z[170] * q_lmDt;
  Z[333] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_lmDt) + Z[174] * VAR[9]) + Z[185] * VAR[10]) + Z[186] * VAR[8];
  Z[112] = Z[110] * Z[0];
  Z[181] = ((Z[112] + Z[10] * Z[58]) + Z[13] * Z[60]) - Z[5] * Z[44];
  Z[182] = (Z[10] * Z[57] + Z[13] * Z[59]) - Z[5] * Z[45];
  Z[334] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[159] * VAR[9]) + Z[160]
               * VAR[13]) + Z[181] * VAR[8]) + Z[182] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[335] = (Z[332] * Z[332] + Z[333] * Z[333]) + Z[334] * Z[334];
  Z[336] = Z[335];
  b_sqrt(&Z[336]);
  vrel2_Tx = (Z[4] * ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR
    [13]) + Z[166] * q_lmDt) + Z[174] * VAR[9]) + Z[185] * VAR[10]) + Z[186] *
                      VAR[8]) - Z[2] * ((((((Z[170] * q_lmDt - Z[148] * VAR[11])
    - Z[149] * VAR[12]) - Z[150] * VAR[13]) - Z[171] * VAR[9]) - Z[183] * VAR[8])
    - Z[184] * VAR[10])) / (Z[326] * (0.01 + Z[336]));
  Z[118] = (((0.035 + 0.0945 * Z[13]) + Z[117] * Z[5]) - VAR[7]) - 0.1871 * Z[10];
  Z[259] = std::tanh(11613.5814 * (0.0446 + Z[118]));
  Z[260] = std::abs(0.0446 + Z[118]);
  Z[261] = 80.046 * (1.0 + Z[259]) * rt_powd_snf(Z[260], 0.4688);
  Z[66] = Z[55] + Z[58];
  Z[68] = Z[53] + Z[60];
  Z[189] = (Z[4] * Z[44] + Z[9] * Z[66]) + Z[12] * Z[68];
  Z[195] = Z[189] - Z[162];
  Z[67] = Z[57] - Z[56];
  Z[69] = Z[54] + Z[59];
  Z[190] = (Z[4] * Z[45] + Z[9] * Z[67]) + Z[12] * Z[69];
  Z[196] = Z[190] - Z[163];
  Z[187] = (Z[2] * Z[44] + Z[8] * Z[66]) + Z[11] * Z[68];
  Z[193] = Z[167] + Z[187];
  Z[188] = (Z[2] * Z[45] + Z[8] * Z[67]) + Z[11] * Z[69];
  Z[194] = Z[168] + Z[188];
  Z[337] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[171]
              * VAR[9]) + Z[193] * VAR[8]) + Z[194] * VAR[10]) - Z[170] * q_lmDt;
  Z[338] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_lmDt) + Z[174] * VAR[9]) + Z[195] * VAR[8]) + Z[196] * VAR[10];
  Z[119] = Z[117] * Z[0];
  Z[191] = ((Z[119] + Z[10] * Z[66]) + Z[13] * Z[68]) - Z[5] * Z[44];
  Z[192] = (Z[10] * Z[67] + Z[13] * Z[69]) - Z[5] * Z[45];
  Z[339] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[159] * VAR[9]) + Z[160]
               * VAR[13]) + Z[191] * VAR[8]) + Z[192] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[340] = (Z[337] * Z[337] + Z[338] * Z[338]) + Z[339] * Z[339];
  Z[341] = Z[340];
  b_sqrt(&Z[341]);
  vrel3_Tx = (Z[4] * ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR
    [13]) + Z[166] * q_lmDt) + Z[174] * VAR[9]) + Z[195] * VAR[8]) + Z[196] *
                      VAR[10]) - Z[2] * ((((((Z[170] * q_lmDt - Z[148] * VAR[11])
    - Z[149] * VAR[12]) - Z[150] * VAR[13]) - Z[171] * VAR[9]) - Z[193] * VAR[8])
    - Z[194] * VAR[10])) / (Z[326] * (0.01 + Z[341]));
  Z[125] = (((0.035 + 0.0945 * Z[13]) + Z[124] * Z[5]) - VAR[7]) - 0.1871 * Z[10];
  Z[262] = std::tanh(11613.5814 * (0.0446 + Z[125]));
  Z[263] = std::abs(0.0446 + Z[125]);
  Z[264] = 80.046 * (1.0 + Z[262]) * rt_powd_snf(Z[263], 0.4688);
  Z[73] = Z[55] + Z[66];
  Z[75] = Z[53] + Z[68];
  Z[199] = (Z[4] * Z[44] + Z[9] * Z[73]) + Z[12] * Z[75];
  Z[205] = Z[199] - Z[162];
  Z[74] = Z[67] - Z[56];
  Z[76] = Z[54] + Z[69];
  Z[200] = (Z[4] * Z[45] + Z[9] * Z[74]) + Z[12] * Z[76];
  Z[206] = Z[200] - Z[163];
  Z[197] = (Z[2] * Z[44] + Z[8] * Z[73]) + Z[11] * Z[75];
  Z[203] = Z[167] + Z[197];
  Z[198] = (Z[2] * Z[45] + Z[8] * Z[74]) + Z[11] * Z[76];
  Z[204] = Z[168] + Z[198];
  Z[342] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[171]
              * VAR[9]) + Z[203] * VAR[8]) + Z[204] * VAR[10]) - Z[170] * q_lmDt;
  Z[343] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_lmDt) + Z[174] * VAR[9]) + Z[205] * VAR[8]) + Z[206] * VAR[10];
  Z[126] = Z[124] * Z[0];
  Z[201] = ((Z[126] + Z[10] * Z[73]) + Z[13] * Z[75]) - Z[5] * Z[44];
  Z[202] = (Z[10] * Z[74] + Z[13] * Z[76]) - Z[5] * Z[45];
  Z[344] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[159] * VAR[9]) + Z[160]
               * VAR[13]) + Z[201] * VAR[8]) + Z[202] * VAR[10]) + 0.0945 * Z[20])
    - 0.1871 * Z[18];
  Z[345] = (Z[342] * Z[342] + Z[343] * Z[343]) + Z[344] * Z[344];
  Z[346] = Z[345];
  b_sqrt(&Z[346]);
  Ft8 = (((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166] *
         q_lmDt) + Z[174] * VAR[9];
  vrel2_Ny = (((Z[170] * q_lmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z[150]
              * VAR[13]) - Z[171] * VAR[9];
  vrel4_Tx = (Z[4] * ((Ft8 + Z[205] * VAR[8]) + Z[206] * VAR[10]) - Z[2] *
              ((vrel2_Ny - Z[203] * VAR[8]) - Z[204] * VAR[10])) / (Z[326] *
    (0.01 + Z[346]));
  vrel3_Ny = (vrel2_Ny - Z[172] * VAR[10]) - Z[173] * VAR[8];
  Ft1 = 0.23511410091698931 * (0.5 + 0.5 * std::tanh(-3.0 + 30.0 * (Z[4] * ((Ft8
    + Z[175] * VAR[10]) + Z[176] * VAR[8]) - Z[2] * vrel3_Ny) / Z[326])) * (((Z
    [255] * vrel1_Tx + Z[258] * vrel2_Tx) + Z[261] * vrel3_Tx) + Z[264] *
    vrel4_Tx) / (1.0 - 0.23511410091698931 * vrel1_Tx) - 0.25 * q_lmDt * (1.0 -
    std::tanh(3.0 + 30.0 * q_lmDt));
  vrel2_Ny = Z[255] - Ft1;
  Fn1 = 0.5 * vrel2_Ny * (1.0 + std::tanh(-3.0 + 30.0 * vrel2_Ny));
  vrel1_Nx = -vrel3_Ny / (0.01 + Z[331]);
  Z[371] = 0.4 * Fn1 * vrel1_Nx;
  vrel2_Nx = -((((((Z[170] * q_lmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z
                  [150] * VAR[13]) - Z[171] * VAR[9]) - Z[183] * VAR[8]) - Z[184]
               * VAR[10]) / (0.01 + Z[336]);
  Z[373] = 0.4 * Z[258] * vrel2_Nx;
  Z[375] = -Z[371] - Z[373];
  vrel3_Nx = -((((((Z[170] * q_lmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z
                  [150] * VAR[13]) - Z[171] * VAR[9]) - Z[193] * VAR[8]) - Z[194]
               * VAR[10]) / (0.01 + Z[341]);
  Z[377] = 0.4 * Z[261] * vrel3_Nx;
  Z[379] = Z[375] - Z[377];
  Ft8 = (((((Z[170] * q_lmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z[150] *
           VAR[13]) - Z[171] * VAR[9]) - Z[203] * VAR[8]) - Z[204] * VAR[10];
  Ft4 = 0.25 * q_lmDt * (1.0 + std::tanh(-3.0 + 30.0 * q_lmDt)) -
    0.31945420401891722 * (0.5 - 0.5 * std::tanh(3.0 + 30.0 * (Z[4] * ((((((Z
    [149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166] * q_lmDt) +
    Z[174] * VAR[9]) + Z[205] * VAR[8]) + Z[206] * VAR[10]) - Z[2] * Ft8) / Z
    [326])) * (((Z[255] * vrel1_Tx + Z[258] * vrel2_Tx) + Z[261] * vrel3_Tx) +
               Z[264] * vrel4_Tx) / (1.0 + 0.31945420401891722 * vrel4_Tx);
  vrel2_Ny = Z[264] - Ft4;
  Fn4 = 0.5 * vrel2_Ny * (1.0 + std::tanh(-3.0 + 30.0 * vrel2_Ny));
  vrel4_Nx = -Ft8 / (0.01 + Z[346]);
  Z[381] = 0.4 * Fn4 * vrel4_Nx;
  Z[383] = Z[379] - Z[381];
  Z[131] = (((0.035 + 0.0945 * Z[13]) + 0.14827 * Z[5]) + 0.1871 * Z[10]) - VAR
    [7];
  Z[265] = std::tanh(11613.5814 * (0.0446 + Z[131]));
  Z[266] = std::abs(0.0446 + Z[131]);
  Z[267] = 80.046 * (1.0 + Z[265]) * rt_powd_snf(Z[266], 0.4688);
  Z[210] = 0.0945 * Z[9] - 0.1871 * Z[12];
  Z[219] = Z[164] + Z[210];
  Z[82] = 0.1871 * Z[13] - 0.0945 * Z[10];
  Z[80] = 0.1871 * Z[5] - 0.14827 * Z[10];
  Z[211] = (Z[4] * Z[82] + Z[9] * Z[42]) + Z[12] * Z[80];
  Z[220] = Z[211] - Z[163];
  Z[81] = -0.0945 * Z[7] - 0.1871 * Z[6];
  Z[212] = (Z[4] * Z[81] - Z[9] * Z[43]) - Z[12] * Z[41];
  Z[221] = Z[212] - Z[162];
  Z[209] = (Z[2] * Z[81] - Z[8] * Z[43]) - Z[11] * Z[41];
  Z[216] = Z[167] + Z[209];
  Z[208] = (Z[2] * Z[82] + Z[8] * Z[42]) + Z[11] * Z[80];
  Z[217] = Z[168] + Z[208];
  Z[207] = 0.0945 * Z[8] - 0.1871 * Z[11];
  Z[218] = Z[207] - Z[169];
  Z[347] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[216]
              * VAR[8]) + Z[217] * VAR[10]) + Z[218] * VAR[9]) - Z[170] * q_rmDt;
  Z[348] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_rmDt) + Z[219] * VAR[9]) + Z[220] * VAR[10]) + Z[221] * VAR[8];
  Z[213] = ((Z[101] - Z[5] * Z[81]) - Z[10] * Z[43]) - Z[13] * Z[41];
  Z[214] = 0.0945 * Z[10] - 0.1871 * Z[13];
  Z[215] = (Z[10] * Z[42] + Z[13] * Z[80]) - Z[5] * Z[82];
  Z[349] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[160] * VAR[13]) + Z
               [213] * VAR[8]) + Z[214] * VAR[9]) + Z[215] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[350] = (Z[347] * Z[347] + Z[348] * Z[348]) + Z[349] * Z[349];
  Z[351] = Z[350];
  b_sqrt(&Z[351]);
  vrel1_Tx = (Z[4] * ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR
    [13]) + Z[166] * q_rmDt) + Z[219] * VAR[9]) + Z[220] * VAR[10]) + Z[221] *
                      VAR[8]) - Z[2] * ((((((Z[170] * q_rmDt - Z[148] * VAR[11])
    - Z[149] * VAR[12]) - Z[150] * VAR[13]) - Z[216] * VAR[8]) - Z[217] * VAR[10])
    - Z[218] * VAR[9])) / (Z[326] * (0.01 + Z[351]));
  Z[135] = (((0.035 + 0.0945 * Z[13]) + Z[110] * Z[5]) + 0.1871 * Z[10]) - VAR[7];
  Z[268] = std::tanh(11613.5814 * (0.0446 + Z[135]));
  Z[269] = std::abs(0.0446 + Z[135]);
  Z[270] = 80.046 * (1.0 + Z[268]) * rt_powd_snf(Z[269], 0.4688);
  Z[88] = Z[54] + Z[80];
  Z[224] = (Z[4] * Z[82] + Z[9] * Z[57]) + Z[12] * Z[88];
  Z[230] = Z[224] - Z[163];
  Z[225] = (Z[4] * Z[81] + Z[9] * Z[58]) + Z[12] * Z[60];
  Z[231] = Z[225] - Z[162];
  Z[223] = (Z[2] * Z[81] + Z[8] * Z[58]) + Z[11] * Z[60];
  Z[228] = Z[167] + Z[223];
  Z[222] = (Z[2] * Z[82] + Z[8] * Z[57]) + Z[11] * Z[88];
  Z[229] = Z[168] + Z[222];
  Z[352] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[218]
              * VAR[9]) + Z[228] * VAR[8]) + Z[229] * VAR[10]) - Z[170] * q_rmDt;
  Z[353] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_rmDt) + Z[219] * VAR[9]) + Z[230] * VAR[10]) + Z[231] * VAR[8];
  Z[226] = ((Z[112] + Z[10] * Z[58]) + Z[13] * Z[60]) - Z[5] * Z[81];
  Z[227] = (Z[10] * Z[57] + Z[13] * Z[88]) - Z[5] * Z[82];
  Z[354] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[160] * VAR[13]) + Z
               [214] * VAR[9]) + Z[226] * VAR[8]) + Z[227] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[355] = (Z[352] * Z[352] + Z[353] * Z[353]) + Z[354] * Z[354];
  Z[356] = Z[355];
  b_sqrt(&Z[356]);
  vrel2_Tx = (Z[4] * ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR
    [13]) + Z[166] * q_rmDt) + Z[219] * VAR[9]) + Z[230] * VAR[10]) + Z[231] *
                      VAR[8]) - Z[2] * ((((((Z[170] * q_rmDt - Z[148] * VAR[11])
    - Z[149] * VAR[12]) - Z[150] * VAR[13]) - Z[218] * VAR[9]) - Z[228] * VAR[8])
    - Z[229] * VAR[10])) / (Z[326] * (0.01 + Z[356]));
  Z[139] = (((0.035 + 0.0945 * Z[13]) + Z[117] * Z[5]) + 0.1871 * Z[10]) - VAR[7];
  Z[271] = std::tanh(11613.5814 * (0.0446 + Z[139]));
  Z[272] = std::abs(0.0446 + Z[139]);
  Z[273] = 80.046 * (1.0 + Z[271]) * rt_powd_snf(Z[272], 0.4688);
  Z[234] = (Z[4] * Z[81] + Z[9] * Z[66]) + Z[12] * Z[68];
  Z[240] = Z[234] - Z[162];
  Z[92] = Z[54] + Z[88];
  Z[235] = (Z[4] * Z[82] + Z[9] * Z[67]) + Z[12] * Z[92];
  Z[241] = Z[235] - Z[163];
  Z[232] = (Z[2] * Z[81] + Z[8] * Z[66]) + Z[11] * Z[68];
  Z[238] = Z[167] + Z[232];
  Z[233] = (Z[2] * Z[82] + Z[8] * Z[67]) + Z[11] * Z[92];
  Z[239] = Z[168] + Z[233];
  Z[357] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[218]
              * VAR[9]) + Z[238] * VAR[8]) + Z[239] * VAR[10]) - Z[170] * q_rmDt;
  Z[358] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_rmDt) + Z[219] * VAR[9]) + Z[240] * VAR[8]) + Z[241] * VAR[10];
  Z[236] = ((Z[119] + Z[10] * Z[66]) + Z[13] * Z[68]) - Z[5] * Z[81];
  Z[237] = (Z[10] * Z[67] + Z[13] * Z[92]) - Z[5] * Z[82];
  Z[359] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[160] * VAR[13]) + Z
               [214] * VAR[9]) + Z[236] * VAR[8]) + Z[237] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[360] = (Z[357] * Z[357] + Z[358] * Z[358]) + Z[359] * Z[359];
  Z[361] = Z[360];
  b_sqrt(&Z[361]);
  vrel3_Tx = (Z[4] * ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR
    [13]) + Z[166] * q_rmDt) + Z[219] * VAR[9]) + Z[240] * VAR[8]) + Z[241] *
                      VAR[10]) - Z[2] * ((((((Z[170] * q_rmDt - Z[148] * VAR[11])
    - Z[149] * VAR[12]) - Z[150] * VAR[13]) - Z[218] * VAR[9]) - Z[238] * VAR[8])
    - Z[239] * VAR[10])) / (Z[326] * (0.01 + Z[361]));
  Z[143] = (((0.035 + 0.0945 * Z[13]) + Z[124] * Z[5]) + 0.1871 * Z[10]) - VAR[7];
  Z[274] = std::tanh(11613.5814 * (0.0446 + Z[143]));
  Z[275] = std::abs(0.0446 + Z[143]);
  Z[276] = 80.046 * (1.0 + Z[274]) * rt_powd_snf(Z[275], 0.4688);
  Z[244] = (Z[4] * Z[81] + Z[9] * Z[73]) + Z[12] * Z[75];
  Z[250] = Z[244] - Z[162];
  Z[96] = Z[54] + Z[92];
  Z[245] = (Z[4] * Z[82] + Z[9] * Z[74]) + Z[12] * Z[96];
  Z[251] = Z[245] - Z[163];
  Z[242] = (Z[2] * Z[81] + Z[8] * Z[73]) + Z[11] * Z[75];
  Z[248] = Z[167] + Z[242];
  Z[243] = (Z[2] * Z[82] + Z[8] * Z[74]) + Z[11] * Z[96];
  Z[249] = Z[168] + Z[243];
  Z[362] = (((((Z[148] * VAR[11] + Z[149] * VAR[12]) + Z[150] * VAR[13]) + Z[218]
              * VAR[9]) + Z[248] * VAR[8]) + Z[249] * VAR[10]) - Z[170] * q_rmDt;
  Z[363] = (((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_rmDt) + Z[219] * VAR[9]) + Z[250] * VAR[8]) + Z[251] * VAR[10];
  Z[246] = ((Z[126] + Z[10] * Z[73]) + Z[13] * Z[75]) - Z[5] * Z[81];
  Z[247] = (Z[10] * Z[74] + Z[13] * Z[96]) - Z[5] * Z[82];
  Z[364] = ((((((Z[150] * VAR[11] + Z[155] * VAR[12]) + Z[160] * VAR[13]) + Z
               [214] * VAR[9]) + Z[246] * VAR[8]) + Z[247] * VAR[10]) + 0.0945 *
            Z[20]) + 0.1871 * Z[18];
  Z[365] = (Z[362] * Z[362] + Z[363] * Z[363]) + Z[364] * Z[364];
  Z[366] = Z[365];
  b_sqrt(&Z[366]);
  vrel3_Ny = (((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_rmDt) + Z[219] * VAR[9];
  vrel2_Ny = ((Z[170] * q_rmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z[150] *
    VAR[13];
  Ft8 = Z[218] * VAR[9];
  vrel4_Tx = (Z[4] * ((vrel3_Ny + Z[250] * VAR[8]) + Z[251] * VAR[10]) - Z[2] *
              (((vrel2_Ny - Ft8) - Z[248] * VAR[8]) - Z[249] * VAR[10])) / (Z
    [326] * (0.01 + Z[366]));
  Ft8 = ((vrel2_Ny - Z[216] * VAR[8]) - Z[217] * VAR[10]) - Ft8;
  Ft5 = 0.23511410091698931 * (0.5 + 0.5 * std::tanh(-3.0 + 30.0 * (Z[4] *
    ((vrel3_Ny + Z[220] * VAR[10]) + Z[221] * VAR[8]) - Z[2] * Ft8) / Z[326])) *
    (((Z[267] * vrel1_Tx + Z[270] * vrel2_Tx) + Z[273] * vrel3_Tx) + Z[276] *
     vrel4_Tx) / (1.0 - 0.23511410091698931 * vrel1_Tx) - 0.25 * q_rmDt * (1.0 -
    std::tanh(3.0 + 30.0 * q_rmDt));
  vrel2_Ny = Z[267] - Ft5;
  Fn5 = 0.5 * vrel2_Ny * (1.0 + std::tanh(-3.0 + 30.0 * vrel2_Ny));
  vrel5_Nx = -Ft8 / (0.01 + Z[351]);
  Z[387] = Z[383] - 0.4 * Fn5 * vrel5_Nx;
  vrel6_Nx = -((((((Z[170] * q_rmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z
                  [150] * VAR[13]) - Z[218] * VAR[9]) - Z[228] * VAR[8]) - Z[229]
               * VAR[10]) / (0.01 + Z[356]);
  Z[389] = 0.4 * Z[270] * vrel6_Nx;
  Z[391] = Z[387] - Z[389];
  vrel7_Nx = -((((((Z[170] * q_rmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z
                  [150] * VAR[13]) - Z[218] * VAR[9]) - Z[238] * VAR[8]) - Z[239]
               * VAR[10]) / (0.01 + Z[361]);
  Z[393] = 0.4 * Z[273] * vrel7_Nx;
  Z[395] = Z[391] - Z[393];
  vrel3_Ny = (((((Z[170] * q_rmDt - Z[148] * VAR[11]) - Z[149] * VAR[12]) - Z
                [150] * VAR[13]) - Z[218] * VAR[9]) - Z[248] * VAR[8]) - Z[249] *
    VAR[10];
  Ft8 = 0.25 * q_rmDt * (1.0 + std::tanh(-3.0 + 30.0 * q_rmDt)) -
    0.31945420401891722 * (0.5 - 0.5 * std::tanh(3.0 + 30.0 * (Z[4] * ((((((Z
    [149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166] * q_rmDt) +
    Z[219] * VAR[9]) + Z[250] * VAR[8]) + Z[251] * VAR[10]) - Z[2] * vrel3_Ny) /
    Z[326])) * (((Z[267] * vrel1_Tx + Z[270] * vrel2_Tx) + Z[273] * vrel3_Tx) +
                Z[276] * vrel4_Tx) / (1.0 + 0.31945420401891722 * vrel4_Tx);
  vrel2_Ny = Z[276] - Ft8;
  Fn8 = 0.5 * vrel2_Ny * (1.0 + std::tanh(-3.0 + 30.0 * vrel2_Ny));
  vrel8_Nx = -vrel3_Ny / (0.01 + Z[366]);
  Z[399] = Z[395] - 0.4 * Fn8 * vrel8_Nx;
  Z[367] = Z[255] - Ft1;
  Z[368] = Z[264] - Ft4;
  Z[369] = Z[267] - Ft5;
  Z[370] = Z[276] - Ft8;
  Ft1 = (Z[2] * Z[5] - Z[8] * Z[10]) - Z[11] * Z[13];
  Z[488] = (((((((Z[399] - Z[258] * Ft1) - Z[261] * Ft1) - Z[270] * Ft1) - Z[273]
               * Ft1) - Z[367] * Ft1) - Z[368] * Ft1) - Z[369] * Ft1) - Z[370] *
    Ft1;
  Z[497] = Z[488] / 14.0;
  vrel2_Ny = (((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166]
              * q_lmDt) + Z[174] * VAR[9];
  vrel4_Tx = ((vrel2_Ny + Z[175] * VAR[10]) + Z[176] * VAR[8]) / (0.01 + Z[331]);
  vrel2_Ny = ((vrel2_Ny + Z[185] * VAR[10]) + Z[186] * VAR[8]) / (0.01 + Z[336]);
  Z[374] = 0.4 * Z[258] * vrel2_Ny;
  Z[376] = -(0.4 * Fn1 * vrel4_Tx) - Z[374];
  vrel3_Ny = ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z
                 [166] * q_lmDt) + Z[174] * VAR[9]) + Z[195] * VAR[8]) + Z[196] *
              VAR[10]) / (0.01 + Z[341]);
  Z[378] = 0.4 * Z[261] * vrel3_Ny;
  Z[380] = Z[376] - Z[378];
  Ft5 = ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166] *
            q_lmDt) + Z[174] * VAR[9]) + Z[205] * VAR[8]) + Z[206] * VAR[10]) /
    (0.01 + Z[346]);
  Z[384] = Z[380] - 0.4 * Fn4 * Ft5;
  Ft4 = ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z[166] *
            q_rmDt) + Z[219] * VAR[9]) + Z[220] * VAR[10]) + Z[221] * VAR[8]) /
    (0.01 + Z[351]);
  Z[388] = Z[384] - 0.4 * Fn5 * Ft4;
  vrel1_Tx = ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z
                 [166] * q_rmDt) + Z[219] * VAR[9]) + Z[230] * VAR[10]) + Z[231]
              * VAR[8]) / (0.01 + Z[356]);
  Z[390] = 0.4 * Z[270] * vrel1_Tx;
  Z[392] = Z[388] - Z[390];
  vrel2_Tx = ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z
                 [166] * q_rmDt) + Z[219] * VAR[9]) + Z[240] * VAR[8]) + Z[241] *
              VAR[10]) / (0.01 + Z[361]);
  Z[394] = 0.4 * Z[273] * vrel2_Tx;
  Z[396] = Z[392] - Z[394];
  vrel3_Tx = ((((((Z[149] * VAR[11] + Z[154] * VAR[12]) + Z[155] * VAR[13]) + Z
                 [166] * q_rmDt) + Z[219] * VAR[9]) + Z[250] * VAR[8]) + Z[251] *
              VAR[10]) / (0.01 + Z[366]);
  Z[400] = Z[396] - 0.4 * Fn8 * vrel3_Tx;
  Ft1 = (Z[4] * Z[5] - Z[9] * Z[10]) - Z[12] * Z[13];
  Z[489] = (((((((Z[400] - Z[258] * Ft1) - Z[261] * Ft1) - Z[270] * Ft1) - Z[273]
               * Ft1) - Z[367] * Ft1) - Z[368] * Ft1) - Z[369] * Ft1) - Z[370] *
    Ft1;
  Z[498] = Z[489] / 14.0;
  Z[279] = Z[100] * Z[101];
  Z[280] = 0.0945 * Z[100];
  Z[278] = 0.3742 * Z[100];
  Z[281] = ((Z[279] * VAR[8] + Z[280] * Z[20]) - Z[100] * VAR[13]) - 0.5 * Z[278]
    * Z[18];
  Z[277] = Z[100] * Z[100];
  Z[282] = 25.0 * Z[100] * Z[281] / Z[277];
  Z[285] = Z[111] * Z[112];
  Z[286] = 0.0945 * Z[111];
  Z[284] = 0.3742 * Z[111];
  Z[287] = ((Z[285] * VAR[8] + Z[286] * Z[20]) - Z[111] * VAR[13]) - 0.5 * Z[284]
    * Z[18];
  Z[283] = Z[111] * Z[111];
  Z[288] = 25.0 * Z[111] * Z[287] / Z[283];
  Z[291] = Z[118] * Z[119];
  Z[292] = 0.0945 * Z[118];
  Z[290] = 0.3742 * Z[118];
  Z[293] = ((Z[291] * VAR[8] + Z[292] * Z[20]) - Z[118] * VAR[13]) - 0.5 * Z[290]
    * Z[18];
  Z[289] = Z[118] * Z[118];
  Z[294] = 25.0 * Z[118] * Z[293] / Z[289];
  Z[297] = Z[125] * Z[126];
  Z[298] = 0.0945 * Z[125];
  Z[296] = 0.3742 * Z[125];
  Z[299] = ((Z[297] * VAR[8] + Z[298] * Z[20]) - Z[125] * VAR[13]) - 0.5 * Z[296]
    * Z[18];
  Z[295] = Z[125] * Z[125];
  Z[300] = 25.0 * Z[125] * Z[299] / Z[295];
  Z[302] = Z[101] * Z[131];
  Z[303] = 0.0945 * Z[131];
  Z[304] = 0.3742 * Z[131];
  Z[305] = ((Z[302] * VAR[8] + Z[303] * Z[20]) + 0.5 * Z[304] * Z[18]) - Z[131] *
    VAR[13];
  Z[301] = Z[131] * Z[131];
  Z[306] = 25.0 * Z[131] * Z[305] / Z[301];
  Z[308] = Z[112] * Z[135];
  Z[309] = 0.0945 * Z[135];
  Z[310] = 0.3742 * Z[135];
  Z[311] = ((Z[308] * VAR[8] + Z[309] * Z[20]) + 0.5 * Z[310] * Z[18]) - Z[135] *
    VAR[13];
  Z[307] = Z[135] * Z[135];
  Z[312] = 25.0 * Z[135] * Z[311] / Z[307];
  Z[314] = Z[119] * Z[139];
  Z[315] = 0.0945 * Z[139];
  Z[316] = 0.3742 * Z[139];
  Z[317] = ((Z[314] * VAR[8] + Z[315] * Z[20]) + 0.5 * Z[316] * Z[18]) - Z[139] *
    VAR[13];
  Z[313] = Z[139] * Z[139];
  Z[318] = 25.0 * Z[139] * Z[317] / Z[313];
  Z[320] = Z[126] * Z[143];
  Z[321] = 0.0945 * Z[143];
  Z[322] = 0.3742 * Z[143];
  Z[323] = ((Z[320] * VAR[8] + Z[321] * Z[20]) + 0.5 * Z[322] * Z[18]) - Z[143] *
    VAR[13];
  Z[319] = Z[143] * Z[143];
  Z[324] = 25.0 * Z[143] * Z[323] / Z[319];
  Ft1 = (Z[5] * Z[5] + Z[10] * Z[10]) + Z[13] * Z[13];
  Z[490] = (((((((((((((((Z[258] * Ft1 + Z[261] * Ft1) + Z[270] * Ft1) + Z[273] *
                        Ft1) + Z[367] * Ft1) + Z[368] * Ft1) + Z[369] * Ft1) +
                    Z[370] * Ft1) + Z[282]) + Z[288]) + Z[294]) + Z[300]) + Z
               [306]) + Z[312]) + Z[318]) + Z[324]) - Z[252];
  Z[499] = Z[490] / 14.0;
  Z[466] = 0.46277 * Z[6];
  Z[462] = 0.33886 * Z[7];
  Z[471] = Z[6] * Z[466] + Z[7] * Z[462];
  Z[500] = 0.23479 * Z[471];
  Z[456] = Z[13] * VAR[10] - Z[6] * VAR[8];
  Z[454] = VAR[9] - Z[5] * VAR[10];
  Z[457] = 0.23479 * Z[454];
  Z[459] = 0.46277 * Z[456];
  Z[469] = Z[456] * Z[457] - Z[454] * Z[459];
  Z[455] = Z[7] * VAR[8] + Z[10] * VAR[10];
  Z[458] = 0.33886 * Z[455];
  Z[468] = Z[454] * Z[458] - Z[455] * Z[457];
  Z[17] = Z[0] * VAR[8] * VAR[10];
  Z[461] = 0.23479 * Z[17];
  Z[19] = VAR[10] * Z[18] - Z[6] * VAR[8] * VAR[9];
  Z[464] = 0.33886 * Z[19];
  Z[21] = VAR[10] * Z[20] - Z[7] * VAR[8] * VAR[9];
  Z[467] = 0.46277 * Z[21];
  Z[470] = Z[455] * Z[459] - Z[456] * Z[458];
  Z[477] = ((((Z[10] * Z[469] + Z[13] * Z[468]) + Z[5] * Z[461]) + Z[10] * Z[464])
            + Z[13] * Z[467]) - Z[5] * Z[470];
  Z[404] = 0.4 * Fn1 * (((((0.3742 * Z[8] * vrel4_Tx + 0.189 * Z[12] * vrel1_Nx)
    + 0.29654 * Z[2] * vrel4_Tx) - 0.189 * Z[11] * vrel4_Tx) - 0.29654 * Z[4] *
    vrel1_Nx) - 0.3742 * Z[9] * vrel1_Nx);
  Z[408] = 0.4 * Z[258] * (((((0.3742 * Z[8] * vrel2_Ny + 0.189 * Z[12] *
    vrel2_Nx) + 2.0 * Z[110] * Z[2] * vrel2_Ny) - 0.189 * Z[11] * vrel2_Ny) -
    2.0 * Z[110] * Z[4] * vrel2_Nx) - 0.3742 * Z[9] * vrel2_Nx);
  Z[411] = -0.5 * Z[404] - 0.5 * Z[408];
  Z[415] = 0.4 * Z[261] * (((((0.3742 * Z[8] * vrel3_Ny + 0.189 * Z[12] *
    vrel3_Nx) + 2.0 * Z[117] * Z[2] * vrel3_Ny) - 0.189 * Z[11] * vrel3_Ny) -
    2.0 * Z[117] * Z[4] * vrel3_Nx) - 0.3742 * Z[9] * vrel3_Nx);
  Z[418] = Z[411] - 0.5 * Z[415];
  Z[422] = 0.4 * Fn4 * (((((0.3742 * Z[8] * Ft5 + 0.189 * Z[12] * vrel4_Nx) +
    2.0 * Z[124] * Z[2] * Ft5) - 0.189 * Z[11] * Ft5) - 2.0 * Z[124] * Z[4] *
    vrel4_Nx) - 0.3742 * Z[9] * vrel4_Nx);
  Z[425] = Z[418] - 0.5 * Z[422];
  Z[429] = 0.4 * Fn5 * (((((0.3742 * Z[9] * vrel5_Nx + 0.189 * Z[12] * vrel5_Nx)
    + 0.29654 * Z[2] * Ft4) - 0.189 * Z[11] * Ft4) - 0.29654 * Z[4] * vrel5_Nx)
                        - 0.3742 * Z[8] * Ft4);
  Z[432] = Z[425] - 0.5 * Z[429];
  Z[436] = 0.4 * Z[270] * (((((0.3742 * Z[9] * vrel6_Nx + 0.189 * Z[12] *
    vrel6_Nx) + 2.0 * Z[110] * Z[2] * vrel1_Tx) - 0.189 * Z[11] * vrel1_Tx) -
    2.0 * Z[110] * Z[4] * vrel6_Nx) - 0.3742 * Z[8] * vrel1_Tx);
  Z[439] = Z[432] - 0.5 * Z[436];
  Z[443] = 0.4 * Z[273] * (((((0.3742 * Z[9] * vrel7_Nx + 0.189 * Z[12] *
    vrel7_Nx) + 2.0 * Z[117] * Z[2] * vrel2_Tx) - 0.189 * Z[11] * vrel2_Tx) -
    2.0 * Z[117] * Z[4] * vrel7_Nx) - 0.3742 * Z[8] * vrel2_Tx);
  Z[446] = Z[439] - 0.5 * Z[443];
  Z[450] = 0.4 * Fn8 * (((((0.3742 * Z[9] * vrel8_Nx + 0.189 * Z[12] * vrel8_Nx)
    + 2.0 * Z[124] * Z[2] * vrel3_Tx) - 0.189 * Z[11] * vrel3_Tx) - 2.0 * Z[124]
    * Z[4] * vrel8_Nx) - 0.3742 * Z[8] * vrel3_Tx);
  Z[453] = Z[446] - 0.5 * Z[450];
  Z[401] = Z[100] - 0.035;
  Z[402] = 0.4 * Fn1 * (((2.0 * Z[401] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
                        0.29654 * Z[5]) * vrel4_Tx;
  Z[405] = Z[111] - 0.035;
  Z[406] = 0.4 * Z[258] * (((2.0 * Z[405] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[110] * Z[5]) * vrel2_Ny;
  Z[409] = 0.5 * Z[402] + 0.5 * Z[406];
  Z[412] = Z[118] - 0.035;
  Z[413] = 0.4 * Z[261] * (((2.0 * Z[412] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[117] * Z[5]) * vrel3_Ny;
  Z[416] = Z[409] + 0.5 * Z[413];
  Z[419] = Z[125] - 0.035;
  Z[420] = 0.4 * Fn4 * (((2.0 * Z[419] + 0.3742 * Z[10]) - 0.189 * Z[13]) - 2.0 *
                        Z[124] * Z[5]) * Ft5;
  Z[423] = Z[416] + 0.5 * Z[420];
  Z[426] = Z[131] - 0.035;
  Z[427] = 0.4 * Fn5 * (((2.0 * Z[426] - 0.189 * Z[13]) - 0.29654 * Z[5]) -
                        0.3742 * Z[10]) * Ft4;
  Z[430] = Z[423] + 0.5 * Z[427];
  Z[433] = Z[135] - 0.035;
  Z[434] = 0.4 * Z[270] * (((2.0 * Z[433] - 0.189 * Z[13]) - 2.0 * Z[110] * Z[5])
    - 0.3742 * Z[10]) * vrel1_Tx;
  Z[437] = Z[430] + 0.5 * Z[434];
  Z[440] = Z[139] - 0.035;
  Z[441] = 0.4 * Z[273] * (((2.0 * Z[440] - 0.189 * Z[13]) - 2.0 * Z[117] * Z[5])
    - 0.3742 * Z[10]) * vrel2_Tx;
  Z[444] = Z[437] + 0.5 * Z[441];
  Z[447] = Z[143] - 0.035;
  Z[448] = 0.4 * Fn8 * (((2.0 * Z[447] - 0.189 * Z[13]) - 2.0 * Z[124] * Z[5]) -
                        0.3742 * Z[10]) * vrel3_Tx;
  Z[451] = Z[444] + 0.5 * Z[448];
  Z[403] = 0.4 * Fn1 * (((2.0 * Z[401] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
                        0.29654 * Z[5]) * vrel1_Nx;
  Z[407] = 0.4 * Z[258] * (((2.0 * Z[405] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[110] * Z[5]) * vrel2_Nx;
  Z[410] = -0.5 * Z[403] - 0.5 * Z[407];
  Z[414] = 0.4 * Z[261] * (((2.0 * Z[412] + 0.3742 * Z[10]) - 0.189 * Z[13]) -
    2.0 * Z[117] * Z[5]) * vrel3_Nx;
  Z[417] = Z[410] - 0.5 * Z[414];
  Z[421] = 0.4 * Fn4 * (((2.0 * Z[419] + 0.3742 * Z[10]) - 0.189 * Z[13]) - 2.0 *
                        Z[124] * Z[5]) * vrel4_Nx;
  Z[424] = Z[417] - 0.5 * Z[421];
  Z[428] = 0.4 * Fn5 * (((2.0 * Z[426] - 0.189 * Z[13]) - 0.29654 * Z[5]) -
                        0.3742 * Z[10]) * vrel5_Nx;
  Z[431] = Z[424] - 0.5 * Z[428];
  Z[435] = 0.4 * Z[270] * (((2.0 * Z[433] - 0.189 * Z[13]) - 2.0 * Z[110] * Z[5])
    - 0.3742 * Z[10]) * vrel6_Nx;
  Z[438] = Z[431] - 0.5 * Z[435];
  Z[442] = 0.4 * Z[273] * (((2.0 * Z[440] - 0.189 * Z[13]) - 2.0 * Z[117] * Z[5])
    - 0.3742 * Z[10]) * vrel7_Nx;
  Z[445] = Z[438] - 0.5 * Z[442];
  Z[449] = 0.4 * Fn8 * (((2.0 * Z[447] - 0.189 * Z[13]) - 2.0 * Z[124] * Z[5]) -
                        0.3742 * Z[10]) * vrel8_Nx;
  Z[452] = Z[445] - 0.5 * Z[449];
  Ft1 = Z[5] * Z[45];
  vrel2_Ny = Z[10] * Z[57];
  Ft8 = Z[5] * Z[82];
  vrel3_Ny = Z[10] * Z[67];
  vrel1_Tx = Z[10] * Z[42];
  vrel2_Tx = Z[10] * Z[74];
  Z[493] = (((((((((((((((Z[5] * Z[5] * Z[453] + Z[8] * Z[10] * Z[451]) + Z[9] *
    Z[10] * Z[452]) + Z[10] * Z[10] * Z[453]) + Z[11] * Z[13] * Z[451]) + Z[12] *
                      Z[13] * Z[452]) + Z[13] * Z[13] * Z[453]) - Z[258] * ((Ft1
    - vrel2_Ny) - Z[13] * Z[59])) - Z[261] * ((Ft1 - vrel3_Ny) - Z[13] * Z[69]))
                  - Z[270] * ((Ft8 - vrel2_Ny) - Z[13] * Z[88])) - Z[273] *
                 ((Ft8 - vrel3_Ny) - Z[13] * Z[92])) - Z[367] * ((Ft1 - vrel1_Tx)
    - Z[13] * Z[40])) - Z[368] * ((Ft1 - vrel2_Tx) - Z[13] * Z[76])) - Z[369] *
              ((Ft8 - vrel1_Tx) - Z[13] * Z[80])) - Z[370] * ((Ft8 - vrel2_Tx) -
              Z[13] * Z[96])) - Z[2] * Z[5] * Z[451]) - Z[4] * Z[5] * Z[452];
  Z[496] = Z[477] - Z[493];
  Z[460] = 0.23479 * Z[5];
  Z[501] = Z[460] * Z[471];
  Z[474] = Z[470] - Z[461];
  Z[479] = Z[0] * (0.3742 * Z[7] + 0.189 * Z[6]);
  Z[484] = Z[0] * (0.3742 * Z[7] - 0.189 * Z[6]);
  Ft1 = 0.3742 * Z[13] + 0.189 * Z[10];
  vrel2_Ny = 0.3742 * Z[13] - 0.189 * Z[10];
  Z[492] = (((((((((((((((((0.5 * Z[258] * Ft1 + 0.5 * Z[261] * Ft1) + 0.5 * Z
    [367] * Ft1) + 0.5 * Z[368] * Ft1) + Z[2] * Z[451]) + Z[4] * Z[452]) + 0.5 *
                       Z[479] * Z[282]) + 0.5 * Z[479] * Z[288]) + 0.5 * Z[479] *
                     Z[294]) + 0.5 * Z[479] * Z[300]) - 0.5 * Z[270] * vrel2_Ny)
                  - 0.5 * Z[273] * vrel2_Ny) - 0.5 * Z[369] * vrel2_Ny) - 0.5 *
                Z[370] * vrel2_Ny) - Z[5] * Z[453]) - 0.5 * Z[484] * Z[306]) -
             0.5 * Z[484] * Z[312]) - 0.5 * Z[484] * Z[318]) - 0.5 * Z[484] * Z
    [324];
  Z[495] = Z[474] - Z[492];
  Z[475] = Z[10] * Z[462] - Z[13] * Z[466];
  Z[506] = 0.23479 * Z[475];
  Z[473] = ((Z[7] * Z[469] + Z[7] * Z[464]) - Z[6] * Z[468]) - Z[6] * Z[467];
  Z[478] = (0.0945 * Z[5] * Z[7] - Z[101]) - 0.1871 * Z[5] * Z[6];
  Z[480] = (0.0945 * Z[5] * Z[7] - Z[112]) - 0.1871 * Z[5] * Z[6];
  Z[481] = (0.0945 * Z[5] * Z[7] - Z[119]) - 0.1871 * Z[5] * Z[6];
  Z[482] = (0.0945 * Z[5] * Z[7] - Z[126]) - 0.1871 * Z[5] * Z[6];
  Z[483] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[101];
  Z[485] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[112];
  Z[486] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[119];
  Z[487] = (0.0945 * Z[5] * Z[7] + 0.1871 * Z[5] * Z[6]) - Z[126];
  Ft1 = Z[10] * Z[43];
  vrel2_Ny = Z[13] * Z[41];
  Ft8 = Z[5] * Z[44];
  vrel3_Ny = Z[5] * Z[81];
  vrel1_Tx = Z[10] * Z[58];
  vrel2_Tx = Z[13] * Z[60];
  vrel3_Tx = Z[10] * Z[66];
  vrel4_Tx = Z[13] * Z[68];
  Ft5 = Z[10] * Z[73];
  Ft4 = Z[13] * Z[75];
  Z[491] = ((((((((((((((((((((Z[478] * Z[282] + Z[480] * Z[288]) + Z[481] * Z
    [294]) + Z[482] * Z[300]) + Z[483] * Z[306]) + Z[485] * Z[312]) + Z[486] *
    Z[318]) + Z[487] * Z[324]) + Z[7] * Z[8] * Z[451]) + Z[7] * Z[9] * Z[452]) +
                      Z[7] * Z[10] * Z[453]) - Z[367] * ((Ft8 + Ft1) + vrel2_Ny))
                    - Z[369] * ((vrel3_Ny + Ft1) + vrel2_Ny)) - Z[258] * ((Ft8 -
    vrel1_Tx) - vrel2_Tx)) - Z[261] * ((Ft8 - vrel3_Tx) - vrel4_Tx)) - Z[270] *
                 ((vrel3_Ny - vrel1_Tx) - vrel2_Tx)) - Z[273] * ((vrel3_Ny -
    vrel3_Tx) - vrel4_Tx)) - Z[368] * ((Ft8 - Ft5) - Ft4)) - Z[370] * ((vrel3_Ny
    - Ft5) - Ft4)) - Z[6] * Z[11] * Z[451]) - Z[6] * Z[12] * Z[452]) - Z[6] * Z
    [13] * Z[453];
  Z[494] = Z[473] - Z[491];
  Z[463] = 0.33886 * Z[10];
  Z[465] = 0.46277 * Z[13];
  Z[476] = (Z[5] * Z[460] + Z[10] * Z[463]) + Z[13] * Z[465];
  Z[472] = Z[7] * Z[463] - Z[6] * Z[465];
  Z[502] = 0.23479 * Z[472];
  Z[503] = (Z[476] * Z[500] - Z[460] * Z[501]) - Z[475] * Z[502];
  Z[511] = ((Z[500] * Z[496] + Z[501] * Z[495]) - Z[506] * Z[494]) / Z[503];
  Z[504] = 0.23479 * Z[476] - Z[460] * Z[460];
  Z[507] = Z[460] * Z[472];
  Z[509] = ((Z[504] * Z[494] - Z[502] * Z[496]) - Z[507] * Z[495]) / Z[503];
  Z[505] = Z[460] * Z[475];
  Z[508] = Z[471] * Z[476] - Z[472] * Z[475];
  Z[510] = ((Z[505] * Z[494] - Z[501] * Z[496]) - Z[508] * Z[495]) / Z[503];

  // =========================================================================== 
  // =========================================================================== 
  VARp[0] = VAR[8];
  VARp[1] = VAR[9];
  VARp[2] = VAR[10];
  VARp[3] = q_lmDt;
  VARp[4] = q_rmDt;
  VARp[5] = VAR[11];
  VARp[6] = VAR[12];
  VARp[7] = VAR[13];
  VARp[8] = -Z[509];
  VARp[9] = Z[510];
  VARp[10] = -Z[511];
  VARp[11] = Z[497];
  VARp[12] = Z[498];
  VARp[13] = Z[499];

  // =========================================================================== 
  // =========================================================================== 
  *wx_imu = -Z[7] * VAR[8] - Z[10] * VAR[10];
  *wy_imu = Z[6] * VAR[8] - Z[13] * VAR[10];
  *wz_imu = VAR[9] - Z[5] * VAR[10];
  Z[31] = 0.24588 * Z[6];
  Z[35] = 0.24588 * Z[21] + 0.10685 * Z[17];
  Z[32] = 0.08935 * Z[6] + 0.10685 * Z[7];
  Z[33] = 0.10685 * Z[10] - 0.08935 * Z[13];
  Z[16] = Z[13] * VAR[10] - Z[6] * VAR[8];
  Z[28] = -0.24588 * Z[10] - 0.08935 * Z[5];
  Z[29] = 0.24588 * Z[7];
  Z[14] = VAR[9] - Z[5] * VAR[10];
  Z[38] = (Z[35] + (Z[32] * VAR[8] + Z[33] * VAR[10]) * Z[16]) - ((0.08935 *
    VAR[9] + Z[28] * VAR[10]) - Z[29] * VAR[8]) * Z[14];
  Z[30] = 0.24588 * Z[13] + 0.10685 * Z[5];
  *ax_imu = ((((((0.10685 * Z[510] + Z[31] * -Z[509]) - 9.80665 * Z[10]) - Z[38])
               - Z[8] * Z[497]) - Z[9] * Z[498]) - Z[10] * Z[499]) - Z[30] * -Z
    [511];
  Z[34] = -0.24588 * Z[19] - 0.08935 * Z[17];
  Z[15] = Z[7] * VAR[8] + Z[10] * VAR[10];
  Z[39] = (Z[34] + ((Z[30] * VAR[10] - 0.10685 * VAR[9]) - Z[31] * VAR[8]) * Z
           [14]) - (Z[32] * VAR[8] + Z[33] * VAR[10]) * Z[15];
  *ay_imu = ((((((Z[29] * -Z[509] - 9.80665 * Z[13]) - Z[39]) - 0.08935 * Z[510])
               - Z[11] * Z[497]) - Z[12] * Z[498]) - Z[13] * Z[499]) - Z[28] *
    -Z[511];
  Z[36] = 0.10685 * Z[19] - 0.08935 * Z[21];
  Z[37] = (Z[36] + ((0.08935 * VAR[9] + Z[28] * VAR[10]) - Z[29] * VAR[8]) * Z
           [15]) - ((Z[30] * VAR[10] - 0.10685 * VAR[9]) - Z[31] * VAR[8]) * Z
    [16];
  *az_imu = (((((Z[37] + Z[2] * Z[497]) + Z[4] * Z[498]) + Z[32] * -Z[509]) + Z
              [33] * -Z[511]) - 9.80665 * Z[5]) - Z[5] * Z[499];

  // ==============================
  //  End of function agbot
  // ==============================
}

//
// File trailer for agbot_simulinkblock_20191202.cpp
//
// [EOF]
//
